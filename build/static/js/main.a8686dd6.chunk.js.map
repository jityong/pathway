{"version":3,"sources":["images/homepageLogo.png","images/BackgroundFaded.png","images/infographics.png","pages/Welcome.js","pages/Language.js","pages/GeneralInfo.js","pages/PatientForm.js","components/PcDialog.js","components/map/InfoWindowEx.js","components/map/ClinicMap.js","components/GpDialog.js","util/MyButton.js","components/comparison/CompareDialog.js","components/comparison/CompareBlock.js","components/ResultTabs.js","pages/FilteredResult.js","pages/ConfirmClinicChoice.js","pages/SummaryPage.js","util/GoogleAnalytics.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Welcome","react_default","a","createElement","style","backgroundColor","Grid","flexGrow","container","justify","direction","item","src","homepageLogo","alt","className","textAlign","verticalAlign","bottom","react_router_dom","to","Button","variant","color","size","justifyContent","Language","handleAlert","alert","minHeight","backgroundImage","concat","Background","backgroundPosition","backgroundSize","AppBar","position","Toolbar","textDecoration","IconButton","edge","aria-label","ArrowBackIos_default","Typography","align","onClick","HelpOutline_default","borderRadius","fontSize","GeneralInfo","NavigateNext_default","react","infographics","width","PatientForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","uploadInfo","fetch","cfg","backend_svc","method","headers","Accept","Content-Type","body","JSON","stringify","postalCode","state","age","nationality","subsidyType","then","res","json","catch","err","console","error","handleSubmitForm","testInput","props","history","push","pathname","userLng","userLat","hasSubsidy","handleChange","bind","assertThisInitialized","goBack","event","_event$target","target","name","value","setState","defineProperty","Promise","resolve","reject","_this2","log","results","geometry","location","lng","lat","age_Regex","RegExp","_this3","getGeoLoc","test","passCheck","length","TextField","required","id","label","onChange","placeholder","InputProps","startAdornment","InputAdornment","pattern","FormControl","InputLabel","Select","input","OutlinedInput","MenuItem","component","FormLabel","RadioGroup","FormControlLabel","control","Radio","disabled","React","Component","PcDialog","_Component","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","open","handleToggle","inherits","createClass","key","onClose","clinic","fullWidth","Name","Dialog","DialogContent","fontWeight","parseFloat","distance","toFixed","Tel","ALL_OPENING_HOURS","map","period","day_string","opening_hours","join","Address","PostalCode","ALL_DIRECTIONS","path","transport_string","directions","handleListItemClick","choice","formData","handleCompare","InfoWindowEx","infoWindowRef","createRef","contentElement","document","prevProps","children","ReactDOM","render","Children","only","current","infowindow","setContent","google_maps_react_dist","assign","ref","mapStyles","height","ClinicMap","activeMarker","selectedPlace","type","showingInfoWindow","onMarkerClick","marker","_this$props","GP","PC","displayCurrent","coord","displayGP","properties","HCI_NAME","price","rating","doctorName","DR_NAME","formattedOpeningHours","formattedDirections","icon","coordinates","displayPC","components_PcDialog","google","zoom","initialCenter","InfoWindowEx_InfoWindowEx","onInfoWindowClose","visible","process","FILE_NAME","BLK_HSE_NO","STREET_NAME","FLOOR_NO","UNIT_NO","BUILDING_NAME","callbackFunction","GoogleApiWrapper","apiKey","GpDialog","redirectTo","react_router","MyButton","_ref","tip","btnClassName","tipClassName","Tooltip","title","placement","xlsx","require","CompareDialog","priceOpen","userNationality","userAge","userSubsidyType","handlePriceToggle","_this$state","clinicOne","clinicTwo","createData","gp","pc","rows","dangerouslySetInnerHTML","__html","consultationPriceRows","consultationPrices","consultation","data","Description","PCN_Price","PG","MG","BLUE_CHAS","NON_CHAS","NON_RESIDENT","Polyclinic_Price","SG_CHILD_ELDERLY","SG_ADULT","PR","drugPriceRows","drugPrices","drugs","ORANGE_CHAS","PG_CHAS","NON_SG","MG_above65","noPG_above65","MG_below65","below65","nonSG","testPriceRows","testPrices","tests","Non_CHAS","SG","drugPriceLabel","testPriceLabel","maxWidth","Table","TableHead","TableRow","TableCell","TableBody","row","minWidth","scope","ExpandMore_default","isNaN","SSF","format","TableFooter","useStyles","makeStyles","theme","root","palette","background","paper","CompareBlock","classes","_React$useState","useState","_React$useState2","slicedToArray","setClinicOne","_React$useState3","_React$useState4","setClinicTwo","_React$useState5","_React$useState6","setOpen","_React$useState7","_React$useState8","openTwo","setOpenTwo","handleClickOpen","handleClickOpenTwo","handleClickClose","handleClickCloseTwo","useEffect","Chip","onDelete","callbackDeleteOne","callbackDeleteTwo","comparison_CompareDialog","TabContainer","dir","padding","ResultTabs","useTheme","setValue","_React$useState9","_React$useState10","activeGPPage","setActiveGPPage","_React$useState11","_React$useState12","activePCPage","setActivePCPage","_React$useState13","itemPerPage","handleGPClose","handlePCClose","indexOfLastTodoGP","indexOfFirstTodoGP","filteredGP","slice","components_GpDialog","selectedGP","indexOfLastTodoPC","indexOfFirstTodoPC","filteredPC","selectedPC","comparison_CompareBlock","Tabs","newValue","indicatorColor","textColor","Tab","lib_default","axis","index","onChangeIndex","Pagination_default","hideDisabled","activePage","itemsCountPerPage","totalItemsCount","pageNumber","default","pageRangeDisplayed","currentLoc","map_ClinicMap","FilteredResult","sortByLoc","userNotifDialog","handleUserNotifToggle","userNotification","font","fontStyle","features","filter","from","turf","dist","units","clinics","sortDist","b","sortedGP","sort","sortedPC","Switch","checked","inputProps","labelPlacement","components_ResultTabs","spacing","ConfirmClinicChoice","result","Paper","sqaure","experienceLabels","1","2","3","4","5","usefulnessLabels","SummaryPage","userExperience","setUserExperience","experienceHover","setExperienceHover","usefulness","setUsefulness","usefulnessHover","setUsefulnessHover","feedback","setFeedback","dialog","setDialog","feedbackForm","Rating","precision","emptyIcon","StarBorder_default","parseInt","onChangeActive","newExperienceHover","Box","ml","newUsefulnessHover","TextareaAutosize","rowsMin","GoogleAnalytics","logPageChange","search","prevLocation","_this$props$location","isDifferentPathname","isDifferentSearch","page","undefined","window","ReactGA","set","objectSpread","origin","options","pageview","util_GoogleAnalytics","initialize","App","GA","exact","Login","Form","ConfirmClinicChoicePage","confirmedChoicePage","Boolean","hostname","match","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8686dd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/homepageLogo.09d0b79e.png\";","module.exports = __webpack_public_path__ + \"static/media/BackgroundFaded.38bffda3.png\";","module.exports = __webpack_public_path__ + \"static/media/infographics.72b3f235.png\";","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport \"../style/App.css\";\nimport {Button, DialogContent} from \"@material-ui/core\";\nimport homepageLogo from \"../images/homepageLogo.png\";\nimport Grid from \"@material-ui/core/Grid\";\n\n//Login page, which is the first page user will see. Need to change background\n//color to blue (whole page & considering responsive web design) for it to look good\n\n//have to find the best orientation for the image and ensure that the button is centred when portrait\n//and bottom half when landscape\nfunction Welcome() {\n    return (\n        <body style={{\n\n                  backgroundColor: \"#ff7c01\"\n              }}>\n\n        <Grid style={{flexGrow: 1}} container justify=\"space-evenly\" direction=\"column\" >\n            <Grid item>\n                <img src={homepageLogo} alt=\"homepageLogo\" className=\"center\"/>\n            </Grid>\n\n            <Grid item style={{\n                textAlign: \"center\",\n                verticalAlign: \"bottom\",\n                bottom: \"0px\"\n            }}>\n                <Link to=\"/Language\">\n                    <Button variant=\"contained\" color=\"secondary\" size=\"large\"\n                            style={{\n                                // position: \"absolute\",\n                                // top: \"50%\",\n                                // left: \"50%\",\n                                // transform: \"translate(-50%,-50%)\"\n                                justifyContent:\"center\"\n                            }}>\n                        CONTINUE\n                    </Button>\n                </Link>\n            </Grid>\n        </Grid>\n        </body>\n    );\n}\n\nexport default Welcome;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBack from \"@material-ui/icons/ArrowBackIos\";\nimport HelpOutline from \"@material-ui/icons/HelpOutline\";\nimport { Typography, Button } from \"@material-ui/core\";\nimport Background from \"../images/BackgroundFaded.png\";\n\n//Choose langauge, but all Buttons go to same place anyway. Could use some styling\n\nfunction Language() {\n  function handleAlert() {\n    alert(\"Only English language is available currently.\");\n  }\n  return (\n    <div\n      style={{\n        minHeight: \"100vh\",\n        backgroundImage: `url(${Background})`,\n        backgroundPosition: \"center\",\n        backgroundSize: \"cover\"\n      }}\n    >\n      <AppBar position=\"static\" style={{ backgroundColor: \"#ff7c01\" }}>\n        <Toolbar>\n          <Link to=\"/\" style={{ textDecoration: \"none\", color: \"white\" }}>\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n              <ArrowBack />\n              <Typography variant=\"subtitle1\">Back</Typography>\n            </IconButton>{\" \"}\n          </Link>\n          <Typography variant=\"h5\" align=\"center\" style={{ flexGrow: 1 }}>\n            LANGUAGE\n          </Typography>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={handleAlert}\n          >\n            <Typography variant=\"subtitle1\" /> <HelpOutline />\n          </IconButton>{\" \"}\n        </Toolbar>\n      </AppBar>\n      <br />\n      <br />\n      <div style={{ textAlign: \"center\" }}>\n        <Button\n          variant=\"contained\"\n          style={{ backgroundColor: \"#FF6565\", borderRadius: \"15px\" }}\n        >\n          <Link to=\"/GeneralInfo\">\n            <span style={{ fontSize: \"7vw\", color: \"black\" }}>English</span>\n          </Link>\n        </Button>{\" \"}\n      </div>\n      <br />\n      <div style={{ textAlign: \"center\" }}>\n        <Button\n          variant=\"contained\"\n          color=\"default\"\n          style={{ borderRadius: \"15px\" }}\n          onClick={handleAlert}\n        >\n          <Link to=\"/GeneralInfo\">\n            <span style={{ fontSize: \"7vw\", color: \"black\" }}>中文</span>\n          </Link>\n        </Button>{\" \"}\n      </div>\n      <br />\n      <div style={{ textAlign: \"center\" }}>\n        <Button\n          variant=\"contained\"\n          color=\"default\"\n          style={{ borderRadius: \"15px\" }}\n          onClick={handleAlert}\n        >\n          <Link to=\"/GeneralInfo\">\n            <span style={{ fontSize: \"7vw\", color: \"black\" }}>\n              Bahasa Melayu\n            </span>\n          </Link>\n        </Button>{\" \"}\n      </div>\n      <br />\n      <div style={{ textAlign: \"center\" }}>\n        <Button\n          variant=\"contained\"\n          color=\"default\"\n          style={{ borderRadius: \"15px\" }}\n          onClick={handleAlert}\n        >\n          <Link to=\"/GeneralInfo\">\n            <span style={{ fontSize: \"7vw\", color: \"black\" }}>Tamil</span>\n          </Link>\n        </Button>{\" \"}\n      </div>\n    </div>\n  );\n}\n\nexport default Language;\n","import React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport infographics from \"../images/infographics.png\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBack from \"@material-ui/icons/ArrowBackIos\";\nimport ArrowNext from \"@material-ui/icons/NavigateNext\";\n//haven't included any info here, can do styling for RWD(responsive web design)\nfunction GeneralInfo() {\n\n  return (\n    <div >\n      <AppBar position=\"static\" style={{ backgroundColor: \"#ff7c01\" }}>\n        <Toolbar>\n        <Link to=\"/Language\" style={{ textDecoration: \"none\", color: \"white\" }}>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <ArrowBack />\n            <Typography variant=\"subtitle1\">Back</Typography>\n          </IconButton>{\" \"}\n          </Link>\n          <Typography variant=\"h5\" align=\"center\" style={{ flexGrow: 1 }}>\n            GENERAL INFORMATION\n          </Typography>\n          <Link to=\"/Form\" style={{ textDecoration: \"none\", color: \"white\" }}>\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n              <Typography variant=\"subtitle1\">Next</Typography> <ArrowNext />\n            </IconButton>{\" \"}\n          </Link>\n        </Toolbar>\n      </AppBar>\n      <Fragment>\n        <img src={infographics} alt=\"infographics\" style={{ width: \"100%\" }} />\n      </Fragment>\n      <Link to=\"/Form\">\n        <div style={{ textAlign: \"center\" }}>\n          <Button\n            variant=\"contained\"\n            size=\"large\"\n            style={{ backgroundColor: \"#ff7c01\" }}\n          >\n            <span style={{ textDecoration: \"none\", color: \"white\" }}>\n              Ok, Next\n            </span>\n          </Button>\n        </div>\n      </Link>{\" \"}\n    </div>\n  );\n}\nexport default GeneralInfo;\n","import React, {Fragment} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBack from \"@material-ui/icons/ArrowBackIos\";\nimport HelpOutline from \"@material-ui/icons/HelpOutline\";\nimport cfg from \"../etc/config.json\";\n\n//this component takes gets postal code & subsidy from user and pass the data over\n//to the FilteredResult.js component through the react router\n// could also use some styling\n\n\nclass PatientForm extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            postalCode: \"\",\n            hasSubsidy: \"No\",\n            subsidyType: \"\",\n            age: \"\",\n            nationality: \"\",\n            userLng: 0,\n            userLat: 0\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.goBack = this.goBack.bind(this);\n    }\n\n    uploadInfo = () => {\n        // console.log(\"running uploadinfo\");\n        fetch(`${cfg.backend_svc}/dbStorage/storeFormInfo`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                postalCode: this.state.postalCode,\n                age: this.state.age,\n                nationality: this.state.nationality,\n                subsidyType: this.state.subsidyType,\n            })\n        })\n            .then(res => res.json())\n            .catch(err => console.error(err));\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target;\n        return this.setState({[name]: value});\n    }\n\n    goBack() {\n        this.props.history.goBack();\n    }\n\n    async getGeoLoc() {\n        //must explicitly return as Promise, so that the .then in testInput() will wait for the final\n        // resolve() value (which we can now explicitly specify, instead of resolving when the fetch() completes.\n        return new Promise((resolve, reject) => {\n            fetch(`${cfg.backend_svc}/googleMap/getGeoLoc`, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    postalCode: this.state.postalCode,\n                })\n            })\n                .then(res => res.json())\n                .then(json => {\n                    console.log('json:', json);\n                    this.setState({\n                        userLng: json.results[0].geometry.location.lng,\n                        userLat: json.results[0].geometry.location.lat\n                    });\n                }).then(res => {\n                resolve(true);\n            })\n                .catch(err => {\n                    console.log('Error in retrieving geo loc from postal code')\n                    console.log(err);\n                    resolve(false);\n                });\n        })\n    }\n\n    async testInput(postalCode, age) {\n        return new Promise((resolve,reject) => {\n            var age_Regex = new RegExp(\"^(\\\\d{0,3})?$\");\n            this.getGeoLoc().then(res => {\n                console.log('geoCode flag:', res);\n                if (!res) {\n                    alert(\"Please enter a valid 6-digit postal code! Example: 119244\");\n                    resolve(false);\n                }\n                console.log('age regex:', age_Regex.test(age));\n                if (!age_Regex.test(age)) {\n                    alert(\"Please enter a valid age! Example: 25\");\n                    resolve(false);\n                }\n                resolve(true);\n            })\n        })\n    }\n\n\n    handleSubmitForm = () => {\n        this.testInput(this.state.postalCode, this.state.age).then(res => {\n            if (res) {\n                this.uploadInfo();\n                this.props.history.push({\n                    pathname: '/FilteredResult',\n                    state: {\n                        postalCode: this.state.postalCode,\n                        age: this.state.age,\n                        nationality: this.state.nationality,\n                        subsidyType: this.state.subsidyType,\n                        userLng: this.state.userLng,\n                        userLat: this.state.userLat\n                    }\n                });\n            }\n        })\n    }\n\n    render() {\n        const passCheck =\n            this.state.postalCode.length === 6 &&\n            this.state.age !== \"\" &&\n            this.state.nationality !== \"\";\n        const help = () => {\n            alert(\n                \"Postal code information is used to help locate and identify clinics near your desired address.\"\n                + \"\\n\\n\" +\n                \"Your age, nationality and eligible subsidy types are used in filtering out relevant prices for your reference!\"\n                + \"\\n\\n\\n\\n\" +\n                \"Please complete the following form to submit and continue your journey on Pathway!\"\n                + \"\\n\\n\" +\n                \"Some of these information are stored to analyse the demographics of our users and are not used for any other purposes.\"\n                + \"\\n\\n\" +\n                \" We are not able to identify any users with these information.\"\n            );\n        };\n        const alertSubsidy = () => {\n            alert(\n                \"For more information regarding subsidies, please refer to http://tiny.cc/moh-subsidies\"\n            );\n        };\n        return (\n            <div>\n                <AppBar position=\"static\" style={{backgroundColor: \"#ff7c01\"}}>\n                    <Toolbar>\n                        <Link\n                            to=\"/GeneralInfo\"\n                            style={{textDecoration: \"none\", color: \"white\"}}\n                        >\n                            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                                <ArrowBack/>\n                                <Typography variant=\"subtitle1\">Back</Typography>\n                            </IconButton>{\" \"}\n                        </Link>\n                        <Typography variant=\"h5\" align=\"center\" style={{flexGrow: 1}}>\n                            DETAILS\n                        </Typography>\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            onClick={help}\n                        >\n                            <Typography variant=\"subtitle1\">Help{\" \"}</Typography> <HelpOutline/>\n                        </IconButton>{\" \"}\n                    </Toolbar>\n                </AppBar>\n                <br/>\n                <br/>\n                <TextField\n                    required={true}\n                    name=\"postalCode\"\n                    id=\"postalCode\"\n                    variant=\"outlined\"\n                    label=\"Please enter your Postal Code\"\n                    value={this.state.postalCode}\n                    onChange={this.handleChange}\n                    placeholder=\"123456\"\n                    InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">S</InputAdornment>,\n                        pattern: \"^(\\d{6})?$\"\n                    }}\n                    style={{width: \"100%\"}}\n                />\n                <br/>\n                <hr/>\n                <TextField\n                    required={true}\n                    id=\"age\"\n                    name=\"age\"\n                    variant=\"outlined\"\n                    label=\"Please enter your age\"\n                    value={this.state.age}\n                    onChange={this.handleChange}\n                    placeholder=\"ie. 25\"\n                    // error ={this.state.age=\"\" ? true : false}\n                    // InputProps={{\n                    //   startAdornment: <InputAdornment position=\"start\" children={}/>\n                    // }}\n                    style={{width: \"100%\"}}\n                />\n                <br/>\n                <hr/>\n                <FormControl variant=\"outlined\" style={{width: \"100%\"}}>\n                    <InputLabel>Nationality</InputLabel>\n                    <Select\n                        required\n                        name=\"nationality\"\n                        value={this.state.nationality}\n                        onChange={this.handleChange}\n                        input={\n                            <OutlinedInput\n                                label=\"Nationality\"\n                                name=\"nationality\"\n                                id=\"nationality\"\n                            />\n                        }\n                    >\n                        <MenuItem value=\"\">\n                            <em>None</em>\n                        </MenuItem>\n                        <MenuItem value=\"Singaporean\">Singaporean</MenuItem>\n                        <MenuItem value=\"Permanent Resident\">Permanent Resident</MenuItem>\n                        <MenuItem value=\"Non-Resident\">Non-Resident</MenuItem>\n                    </Select>\n                </FormControl>\n                <br/>\n                <hr/>\n                {this.state.nationality === \"Singaporean\" &&\n                <FormControl component=\"fieldset\">\n                    <FormLabel component=\"legend\">\n                        Are you eligible for any subsidies?\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            onClick={alertSubsidy}>\n                            <Typography variant=\"subtitle1\"></Typography> <HelpOutline/>\n                        </IconButton>\n                    </FormLabel>\n                    <RadioGroup\n                        aria-label=\"Subsidies eligibility\"\n                        name=\"hasSubsidy\"\n                        value={this.state.hasSubsidy}\n                        // checked={this.state.hasSubsidy === \"Yes\"}\n                        onChange={this.handleChange}\n                    >\n                        <FormControlLabel value=\"Yes\" control={<Radio/>} label=\"Yes\"/>\n                        <FormControlLabel value=\"No\" control={<Radio/>} label=\"No\"/>\n                    </RadioGroup>\n                </FormControl>\n                }\n                {this.state.hasSubsidy === \"Yes\" && this.state.nationality === \"Singaporean\" && (\n                    <div>\n                        <FormControl variant=\"outlined\" style={{width: \"100%\"}}>\n                            <InputLabel>\n                                Please select the subsidy you are eligible for:\n                            </InputLabel>\n                            <Select\n                                name=\"subsidyType\"\n                                value={this.state.subsidyType}\n                                onChange={this.handleChange}\n                                input={\n                                    <OutlinedInput\n                                        label=\"Eligible Subsidies\"\n                                        name=\"age\"\n                                        id=\"outlined-age-simple\"\n                                    />\n                                }\n                            >\n                                <MenuItem value=\"\">\n                                    <em>None</em>\n                                </MenuItem>\n                                <MenuItem value=\"\">--Please select an option--</MenuItem>\n                                <MenuItem value=\"CHAS Orange\">CHAS Orange</MenuItem>\n                                <MenuItem value=\"CHAS Blue\">CHAS Blue</MenuItem>\n                                <MenuItem value=\"CHAS Green\">CHAS Green</MenuItem>\n                                {this.state.age >= 60 &&\n                                <MenuItem value=\"MG\">Merdeka Generation</MenuItem>}\n                                {this.state.age >= 65 &&\n                                <MenuItem value=\"PG\">Pioneer Generation</MenuItem>}\n                            </Select>\n                        </FormControl>\n                    </div>\n                )}\n                <br/>\n                <hr/>\n                <div style={{justifyContent: \"center\", textAlign: \"center\"}}>\n                    {passCheck ? (\n                        <Button\n                            variant=\"contained\"\n                            style={{backgroundColor: \"#ff7c01\"}}\n                            size=\"large\"\n                            onClick={this.handleSubmitForm}\n                        >\n                            <span style={{color: \"white\"}}>Submit</span>\n                        </Button>\n                    ) : (\n                        <Fragment>\n                            <Button variant=\"contained\" disabled={true} size=\"large\">\n                                Submit\n                            </Button>\n                            <br/>\n                            <span style={{fontSize: \"15px\"}}>\n                Please complete the form above to submit.\n              </span>\n                        </Fragment>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PatientForm;\n","import React, {Component} from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport {Link} from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\n\nimport {\n    DialogContent\n} from \"@material-ui/core\";\n\n// Displays the PC dialog when clicked in the list of PCs within resultTab.\n// FilteredResult --> ResultTabs --> PcDialog\n\nexport class PcDialog extends Component {\n    state = {\n        open: false\n    };\n    handleToggle = () => {\n        this.setState({\n            open: !this.state.open\n        });\n    };\n\n    render() {\n        const {onClose} = this.props;\n        const {open} = this.state;\n        const {clinic} = this.props;\n        const handleToggle = () => {\n            this.setState({\n                open: !this.state.open\n            });\n        };\n\n        function handleListItemClick(clinic, name) {\n            onClose(clinic, name);\n            handleToggle();\n        }\n\n        return (\n            <div>\n                <Button variant=\"outlined\" fullWidth={true} onClick={this.handleToggle}>\n                    {clinic.Name}\n                </Button>\n                <Dialog open={open} onClose={handleToggle}>\n                    <DialogContent>\n                        {/* No image to be rendered yet */}\n                        <span style={{fontWeight: \"bold\"}}>{clinic.Name} <br/> {/*Clinic Name*/}</span>\n                        {parseFloat(clinic.distance).toFixed(2)}km away {/*Distance*/}\n                        <hr/>\n\n                        Telephone: {clinic.Tel}\n                        <hr/>\n\n                        <span style={{fontWeight: \"bold\"}}>Opening Hours:</span>\n                        <br/>\n                        {clinic.ALL_OPENING_HOURS.map(period => (\n                            <p key={clinic.id}>\n                                {period.day_string}\n                                <br/>\n                                {period.opening_hours.join(\", \")}\n                            </p>\n                        ))}\n\n                        <hr/>\n                        <span style={{fontWeight: \"bold\"}}>Address: </span>\n                        <br/>\n                        {clinic.Address}{\" \"}\n                        Singapore {clinic.PostalCode}\n                        <hr/>\n\n                        <span style={{fontWeight: \"bold\"}}>Directions:</span>\n                        <br/>\n                        {clinic.ALL_DIRECTIONS.map(path => (\n                            <p key={clinic.id}>\n                                {path.transport_string}\n                                <br/>\n                                {path.directions.join(\", \")}\n                            </p>\n                        ))}\n                        <hr/>\n\n                        <Grid style={{flexGrow: 1}} container direction=\"column\" justify=\"space-evenly\">\n                            <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                onClick={() => handleListItemClick(clinic, clinic.Name)}\n                            >\n                                {\" \"}\n                                Add to comparison{\" \"}\n                            </Button>\n\n                            <br/>\n\n\n                            <Link\n                                to={{\n                                    pathname: \"/ConfirmClinicChoice\",\n                                    state: {\n                                        choice: clinic,\n                                        formData: this.props.formData\n                                    }\n                                }}\n                            >\n                                <Button\n                                    variant=\"contained\"\n                                    style={{backgroundColor: \"#ff7c01\"}}\n                                    onClick={this.handleCompare}\n                                >\n                                    <span style={{color: \"white\"}}>Select</span>\n                                </Button>\n                            </Link>\n                        </Grid>\n                    </DialogContent>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default PcDialog;\n","import React, { Component } from \"react\";\nimport { InfoWindow} from \"google-maps-react\";\nimport ReactDOM from \"react-dom\";\n\nexport default class InfoWindowEx extends Component {\n  constructor(props) {\n    super(props);\n    this.infoWindowRef = React.createRef();\n    this.contentElement = document.createElement(`div`);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.children !== prevProps.children) {\n      ReactDOM.render(\n        React.Children.only(this.props.children),\n        this.contentElement\n      );\n      this.infoWindowRef.current.infowindow.setContent(this.contentElement);\n    }\n  }\n\n  render() {\n    return <InfoWindow ref={this.infoWindowRef} {...this.props} />;\n  }\n}\n","import React, { Component} from \"react\";\nimport {Map, GoogleApiWrapper, Marker} from \"google-maps-react\";\nimport PcDialog from \"../PcDialog\";\nimport Button from \"@material-ui/core/Button\";\nimport InfoWindowEx from \"./InfoWindowEx\";\n\nconst mapStyles = {\n    width: \"100%\",\n    height: \"100%\"\n};\n\nexport class ClinicMap extends Component {\n    state = {\n        activeMarker: {},\n        selectedPlace: {\n            clinic: {\n                type: \"\"\n            }\n        },\n        showingInfoWindow: false\n    };\n\n    onMarkerClick = (props, marker) =>\n        this.setState({\n            activeMarker: marker,\n            selectedPlace: props,\n            showingInfoWindow: true\n        });\n\n    render() {\n        const {GP, PC} = this.props;\n        const {selectedPlace} = this.state;\n\n        const displayCurrent = (\n            <Marker\n                clinic={{type: \"currentloc\"}}\n                position={{\n                    lat: this.props.coord[1],\n                    lng: this.props.coord[0]\n                }}\n            />\n        );\n\n        const displayGP = GP.map(clinic => {\n            clinic.type = \"GP\";\n            clinic.name = clinic.properties.HCI_NAME;\n            clinic.price = \"$$\";\n            clinic.rating = \"4.3\";\n            clinic.doctorName = clinic.properties.DR_NAME;\n\n            clinic.formattedOpeningHours = clinic.properties.ALL_OPENING_HOURS.map(\n                period =>\n                    period.day_string + \":</br>\" + period.opening_hours.join(\",</br>\")\n            ).join(\"</br></br>\");\n\n\n            clinic.formattedDirections = clinic.properties.ALL_DIRECTIONS.map(\n                path => path.transport_string + \"</br>\" + path.directions.join(\",</br>\")\n            ).join(\"</br></br>\");\n\n\n            return (\n                <Marker\n                    key={clinic.id}\n                    clinic={clinic}\n                    id={clinic.id}\n                    icon={\"https://maps.google.com/mapfiles/ms/icons/green.png\"}\n                    position={{\n                        lat: clinic.geometry.coordinates[1],\n                        lng: clinic.geometry.coordinates[0]\n                    }}\n                    onClick={this.onMarkerClick}\n                />\n            );\n        });\n\n        const displayPC = PC.map(clinic => {\n            clinic.type = \"Polyclinic\";\n            clinic.name = clinic.Name;\n            clinic.price = \"$\";\n            clinic.rating = \"4.0\";\n            clinic.formattedOpeningHours = clinic.ALL_OPENING_HOURS.map(\n                period =>\n                    period.day_string + \":</br>\" + period.opening_hours.join(\",</br>\")\n            ).join(\"</br></br>\");\n\n\n            clinic.formattedDirections = clinic.ALL_DIRECTIONS.map(\n                path => path.transport_string + \"</br>\" + path.directions.join(\",</br>\")\n            ).join(\"</br></br>\");\n\n            return (\n                <Marker\n                    key={clinic.id}\n                    clinic={clinic}\n                    id={clinic.id}\n                    icon={\"https://maps.google.com/mapfiles/ms/icons/blue.png\"}\n                    position={{\n                        lat: clinic.coord[1],\n                        lng: clinic.coord[0]\n                    }}\n                    onClick={this.onMarkerClick}\n                >\n                    <PcDialog clinic={clinic}/>\n                </Marker>\n            );\n        });\n        return (\n            <Map\n                google={this.props.google}\n                zoom={15}\n                style={mapStyles}\n                initialCenter={{lat: this.props.coord[1], lng: this.props.coord[0]}}\n            >\n                {displayGP}\n                {displayPC}\n                {displayCurrent}\n                <InfoWindowEx\n                    marker={this.state.activeMarker}\n                    onClose={this.onInfoWindowClose}\n                    visible={this.state.showingInfoWindow}\n                    selectedPlace={selectedPlace}\n                >\n                    {selectedPlace.clinic.type === \"GP\" ? (\n                        <div>\n                            <img\n                                src={\n                                    process.env.PUBLIC_URL +\n                                    `/ClinicPictures/${selectedPlace.clinic.properties.FILE_NAME}.png`\n                                }\n                                alt=\"clinic\"\n                                style={{width: \"100%\"}}\n                            />\n                            <hr/>\n                            <span style={{fontWeight: \"bold\"}}> (GP) {selectedPlace.clinic.properties.HCI_NAME} </span>\n                            <br/>\n                            {parseFloat(selectedPlace.clinic.distance).toFixed(2)}km away\n\n                            <hr/>\n                            <span style={{fontWeight: \"bold\"}}>{selectedPlace.clinic.properties.DR_NAME} </span>\n                            <br/>\n                            <br/>\n                            <span style={{fontWeight: \"bold\"}}>Telephone: </span>\n                            <br/>\n                            {selectedPlace.clinic.properties.Tel}\n\n                            <hr/>\n                            <span style={{fontWeight: \"bold\"}}> Address: </span>\n                            <br/>\n                            {selectedPlace.clinic.properties.BLK_HSE_NO}{\" \"}\n                            {selectedPlace.clinic.properties.STREET_NAME} #\n                            {selectedPlace.clinic.properties.FLOOR_NO}-\n                            {selectedPlace.clinic.properties.UNIT_NO}{\" \"}\n                            {selectedPlace.clinic.properties.BUILDING_NAME} Singapore{\" \"}\n                            {selectedPlace.clinic.properties.PostalCode}\n\n                            <hr/>\n                            {/* <hr />\n              Opening Hours:\n              {selectedPlace.clinic.properties.ALL_OPENING_HOURS.map(period => (\n                  period.day_string + \":\\n\" + period.opening_hours.join(\",\\n\")\n              ))\n              .join(\", \\n\")}\n              <hr />\n              Directions:\n              {selectedPlace.clinic.properties.ALL_DIRECTIONS.map(path => (\n              path.transport_string + \"\\n\" + path.directions.join(\",\\n\")\n              ))\n              .join(\", \\n\")}\n              <hr /> */}\n                            <span style={{fontWeight: \"bold\"}}>Opening Hours:</span>\n                            <br/>\n                            {selectedPlace.clinic.properties.ALL_OPENING_HOURS.map(period => (\n                                <p>\n                                    {period.day_string}\n                                    <br/>\n                                    {period.opening_hours.join(\", \")}\n                                </p>\n                            ))}\n                            <hr/>\n                            <span style={{fontWeight: \"bold\"}}>Directions:</span>\n                            {selectedPlace.clinic.properties.ALL_DIRECTIONS.map(path => (\n                                <p>\n                                    {path.transport_string}\n                                    <br/>\n                                    {path.directions.join(\", \")}\n                                </p>\n                            ))}\n                            <hr/>\n                            {/* <Button>\n                <Link\n                  to={{\n                    pathname: \"/ConfirmClinicChoice\",\n                    state: {\n                      choice: selectedPlace.clinic\n                    }\n                  }}\n                >\n                  <span>Select</span>\n                </Link>\n              </Button> */}\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() =>\n                                    this.props.callbackFunction(selectedPlace.clinic)\n                                }\n                            >\n                                <span style={{color: \"white\"}}>Add to comparison</span>\n                            </Button>\n                        </div>\n                    ) : selectedPlace.clinic.type === \"Polyclinic\" ? (\n                        <div>\n                            <span style={{fontWeight: \"bold\"}}> (Polyclinic) {selectedPlace.clinic.Name} </span>\n                            <br/>\n                            {parseFloat(selectedPlace.clinic.distance).toFixed(2)}km away\n                            <hr/>\n                            <span style={{fontWeight: \"bold\"}}>Telephone: </span>\n                            <br/>\n                            {selectedPlace.clinic.Tel}\n                            <hr/>\n                            <span style={{fontWeight: \"bold\"}}>Address:</span>\n                            <br/>\n                            {selectedPlace.clinic.Address} Singapore{\" \"}\n                            {selectedPlace.clinic.PostalCode}\n                            <hr/>\n                            <span style={{fontWeight: \"bold\"}}>Opening Hours:</span>\n                            <br/>\n                            {selectedPlace.clinic.ALL_OPENING_HOURS.map(period => (\n                                <p>\n                                    {period.day_string}\n                                    <br/>\n                                    {period.opening_hours.join(\", \")}\n                                </p>\n                            ))}\n                            <hr/>\n                            <span style={{fontWeight: \"bold\"}}>Directions:</span>\n                            {selectedPlace.clinic.ALL_DIRECTIONS.map(path => (\n                                <p>\n                                    {path.transport_string}\n                                    <br/>\n                                    {path.directions.join(\", \")}\n                                </p>\n                            ))}\n                            <hr/>\n\n                            {/* <Button>\n                <Link\n                  to={{\n                      pathname: \"/ConfirmClinicChoice\",\n                    state: {\n                      choice: selectedPlace.clinic\n                    }\n                  }}\n                >\n                  <span>Select</span>\n                </Link>\n              </Button> */}\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() =>\n                                    this.props.callbackFunction(selectedPlace.clinic)\n                                }\n                            >\n                                <span style={{color: \"white\"}}>Add to comparison</span>\n                            </Button>\n                        </div>\n                    ) : (\n                        <div>Input Location</div>\n                    )}\n                </InfoWindowEx>\n            </Map>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: 'AIzaSyD4AiZGu6Nl4kS463SYdJlyZQMrFLMokcs'\n})(ClinicMap);\n","import React, {Component} from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport {Link, Redirect} from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\n\nimport {\n    DialogContent,\n} from \"@material-ui/core\";\n\n//Displays the GP dialog when clicked in the list of GPs within resultTab.\n// // FilteredResult --> ResultTabs --> GpDialog\nexport class GpDialog extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            redirectTo: null\n        };\n    }\n\n    handleToggle = () => {\n        this.setState({\n            open: !this.state.open\n        });\n    };\n\n\n    render() {\n\n        const {onClose} = this.props;\n        const {open} = this.state;\n        const {clinic} = this.props;\n        const handleToggle = () => {\n            this.setState({\n                open: !this.state.open\n            });\n        };\n\n        function handleListItemClick(clinic, name) {\n            onClose(clinic, name);\n            handleToggle();\n        }\n\n\n        if (this.state.redirectTo) {\n            return (\n                <Redirect to={this.state.redirectTo}/>\n            );\n        }\n\n        return (\n            <div>\n                <Button variant=\"outlined\" fullWidth={true} onClick={this.handleToggle}>\n                    {clinic.properties.HCI_NAME}\n                </Button>\n                <Dialog open={open} onClose={handleToggle}>\n                    <DialogContent>\n                        <img\n                            src={\n                                process.env.PUBLIC_URL +\n                                `/ClinicPictures/${clinic.properties.FILE_NAME}.png`\n                            }\n                            alt=\"clinic\"\n                            style={{width: \"100%\"}}\n                        />\n                        <hr/>\n                        <span style={{fontWeight: \"bold\"}}>{clinic.properties.HCI_NAME} </span> {/*Clinic Name*/}\n                        <br/>\n                        {parseFloat(clinic.distance).toFixed(2)}km away {/*Distance*/}\n                        <hr/>\n                        <span style={{fontWeight: \"bold\"}}>{clinic.properties.DR_NAME} {/*Doctor Name*/} </span>\n                        <br/>\n                        <br/>\n                        <span style={{fontWeight: \"bold\"}}>Telephone: </span>\n                        <br/>\n                        {clinic.properties.Tel} <br/>\n                        <hr/>\n                        <p style={{fontWeight: \"bold\"}}>Opening Hours:</p>\n                        <br/>\n                        {clinic.properties.ALL_OPENING_HOURS.map(period => (\n                            <p key={clinic.properties.HCI_NAME}>\n                                {period.day_string}\n                                <br/>\n                                {period.opening_hours.join(\", \")}\n                            </p>\n                        ))}\n                        <hr/>\n                        <p style={{fontWeight: \"bold\"}}>Address: </p><br/>\n                        {clinic.properties.BLK_HSE_NO} {clinic.properties.STREET_NAME} #\n                        {clinic.properties.FLOOR_NO}-{clinic.properties.UNIT_NO}{\" \"}\n                        {clinic.properties.BUILDING_NAME} Singapore{\" \"}\n                        {clinic.properties.PostalCode}\n                        <hr/>\n                        <p style={{fontWeight: \"bold\"}}>Directions:</p>\n                        {clinic.properties.ALL_DIRECTIONS.map(path => (\n                            <p key={clinic.properties.HCI_NAME}>\n                                {path.transport_string}\n                                <br/>\n                                {path.directions.join(\", \")}\n                            </p>\n                        ))}\n                        <hr/>\n                        <Grid style={{flexGrow: 1}} container justify=\"space-evenly\" direction=\"column\">\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() =>\n                                    handleListItemClick(clinic, clinic.properties.HCI_NAME)\n                                }\n                            >\n                                <span style={{color: \"white\"}}>Add to comparison</span>\n                            </Button>\n                            <br/>\n\n                            <Link style={{justifyContent:\"center\"}}\n                                to={{\n                                    pathname: \"/ConfirmClinicChoice\",\n                                    state: {\n                                        choice: clinic,\n                                        formData: this.props.formData\n                                    }\n                                }}\n                            >\n                                <Button\n                                    variant=\"contained\"\n                                    style={{backgroundColor: \"#ff7c01\"}}\n                                    onClick={this.handleCompare}\n                                >\n                                    <span style={{color: \"white\"}}>Select</span>\n                                </Button>\n                            </Link>\n                        </Grid>\n                    </DialogContent>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default GpDialog;","import React from 'react';\n\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport default ({ children, onClick, tip, btnClassName, tipClassName }) => (\n  <Tooltip title={tip} className={tipClassName} placement=\"top\">\n    <IconButton onClick={onClick} className={btnClassName}>\n      {children}\n    </IconButton>\n  </Tooltip>\n);","import React, {Component, Fragment} from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport {Link} from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport consultationPrices from \"../../data/consultationPrices\";\nimport drugPrices from \"../../data/drugPrices\";\nimport testPrices from \"../../data/testPrices\";\nimport MyButton from \"../../util/MyButton\";\n\nimport {\n    DialogContent,\n    Typography\n} from \"@material-ui/core\";\n\nvar xlsx = require(\"xlsx\");\n\n//Displays the \"Compare!\" button when 2 clinics are selected for comparison.\n// Displays the table of information for comparison between the 2 clinics.\nexport class CompareDialog extends Component {\n    state = {\n        open: false,\n        priceOpen: false,\n        userNationality: this.props.formData.nationality,\n        userAge: this.props.formData.age,\n        userSubsidyType: this.props.formData.subsidyType\n    };\n    handleToggle = () => {\n        this.setState({\n            open: !this.state.open\n        });\n    };\n    handlePriceToggle = () => {\n        this.setState({\n            priceOpen: !this.state.priceOpen\n        });\n    };\n\n    render() {\n        const {\n            open,\n            priceOpen,\n            userNationality,\n            userAge,\n            userSubsidyType\n        } = this.state;\n        const {clinicOne, clinicTwo} = this.props;\n\n        function createData(name, gp, pc) {\n            return {name, gp, pc};\n        }\n\n        const rows = [\n            createData(\n                <span style={{fontWeight: \"bold\"}}>Name</span>,\n                <span style={{fontWeight: \"bold\"}}>{clinicOne.name}</span>,\n                <span style={{fontWeight: \"bold\"}}> {clinicTwo.name}</span>\n            ),\n            createData(\n                \"Distance (km)\",\n                parseFloat(clinicOne.distance).toFixed(2),\n                parseFloat(clinicTwo.distance).toFixed(2)\n            ),\n            // createData(\"Price\", clinicOne.price, clinicTwo.price),\n            createData(\"Price\", \"$\", \"$\"),\n            // createData(\"Ratings\", clinicOne.rating, clinicTwo.rating),\n\n            createData(\n                \"Opening hours\",\n                <div\n                    dangerouslySetInnerHTML={{\n                        __html: clinicOne.formattedOpeningHours\n                    }}\n                />,\n                <div\n                    dangerouslySetInnerHTML={{\n                        __html: clinicTwo.formattedOpeningHours\n                    }}\n                />\n            ),\n            createData(\n                \"Directions\",\n                <div\n                    dangerouslySetInnerHTML={{\n                        __html: clinicOne.formattedDirections\n                    }}\n                />,\n                <div\n                    dangerouslySetInnerHTML={{\n                        __html: clinicTwo.formattedDirections\n                    }}\n                />\n            )\n\n\n        ];\n        const consultationPriceRows = consultationPrices.consultation.map(function (data) {\n            return createData(\n                data.Description,\n                userNationality === \"Singaporean\"\n                    ? userSubsidyType === \"PG\"\n                    ? data.PCN_Price.PG\n                    : userSubsidyType === \"MG\"\n                        ? data.PCN_Price.MG\n                        : userSubsidyType === \"CHAS Blue\" || userSubsidyType === \"CHAS Orange\"\n                            ? data.PCN_Price.BLUE_CHAS\n                            : data.PCN_Price.NON_CHAS\n                    : data.PCN_Price.NON_RESIDENT,\n                userNationality === \"Singaporean\"\n                    ? userSubsidyType === \"PG\"\n                    ? data.Polyclinic_Price.PG\n                    : userSubsidyType === \"MG\"\n                        ? data.Polyclinic_Price.MG\n                        : userAge < 18 || userAge >= 65\n                            ? data.Polyclinic_Price.SG_CHILD_ELDERLY\n                            : data.Polyclinic_Price.SG_ADULT\n                    : userNationality === \"Permanent Resident\"\n                    ? data.Polyclinic_Price.PR\n                    : data.Polyclinic_Price.NON_RESIDENT\n            )\n        })\n        const drugPriceRows = drugPrices.drugs.map(function (data) {\n            return createData(\n                data.Name + \": \" + data.Description,\n                userNationality === \"Singaporean\"\n                    ? userSubsidyType === \"CHAS Orange\" || userSubsidyType === \"CHAS Blue\"\n                    ? data.PCN_Price.ORANGE_CHAS\n                    : userSubsidyType === \"PG\"\n                        ? data.PCN_Price.PG_CHAS\n                        : data.PCN_Price.NON_CHAS\n                    : data.PCN_Price.NON_SG,\n                userNationality === \"Singaporean\"\n                    ? userAge >= 65\n                    ? userSubsidyType === \"PG\"\n                        ? data.Polyclinic_Price.PG\n                        : userSubsidyType === \"MG\"\n                            ? data.Polyclinic_Price.MG_above65\n                            : data.Polyclinic_Price.noPG_above65\n                    : userSubsidyType === \"MG\"\n                        ? data.Polyclinic_Price.MG_below65\n                        : data.Polyclinic_Price.below65\n                    : data.Polyclinic_Price.nonSG\n            )\n        });\n        const testPriceRows = testPrices.tests.map(function (data) {\n                return createData(\n                    data.Name + \": \" + data.Description,\n                    userNationality === \"Singaporean\"\n                        ? userSubsidyType === \"PG\"\n                        ? data.PCN_Price.PG\n                        : userSubsidyType === \"MG\"\n                            ? data.PCN_Price.MG\n                            : userSubsidyType === \"CHAS Orange\" || userSubsidyType === \"CHAS Blue\"\n                                ? data.PCN_Price.ORANGE_CHAS\n                                : data.PCN_Price.Non_CHAS\n                        : userNationality === \"Permanent Resident\"\n                        ? data.PCN_Price.PR\n                        : data.PCN_Price.NON_RESIDENT,\n                    userNationality === \"Singaporean\"\n                        ? userAge < 18 || userAge >= 65\n                        ? data.Polyclinic_Price.SG_CHILD_ELDERLY\n                        : data.Polyclinic_Price.SG\n                        : userNationality === \"Permanent Resident\"\n                        ? data.Polyclinic_Price.PR\n                        : data.Polyclinic_Price.NON_RESIDENT\n                )\n            }\n        )\n        const drugPriceLabel = [\n            createData(\n                <span style={{fontWeight: \"bold\"}}>Drug prices/month</span>,\n                <span style={{fontWeight: \"bold\"}}>Estimated drug prices per month, ie 30 x tablet</span>,\n                <span style={{fontWeight: \"bold\"}}>Estimated drug prices per month, ie 30 x tablet</span>\n            )];\n\n        const testPriceLabel = [\n            createData(\n                <span style={{fontWeight: \"bold\"}}>Prices for Tests & Screenings</span>,\n                <span style={{fontWeight: \"bold\"}}>Prices for Tests & Screenings</span>,\n                <span style={{fontWeight: \"bold\"}}>Prices for Tests & Screenings</span>\n            )];\n        // const priceRows = consultationPriceRows.concat(drugPriceLabel).concat(drugPriceRows).concat(testPriceLabel).concat(testPriceRows).flatMap(function (data) {\n        //     return data;\n        // });\n        const handleToggle = () => {\n            this.setState({\n                open: !this.state.open\n            });\n        };\n        const handlePriceToggle = () => {\n            this.setState({\n                priceOpen: !this.state.priceOpen\n                // open: false\n            });\n        };\n        return clinicOne === null || clinicTwo === null ? (\n            \"Please select 2 clinics for comparison.\"\n        ) : (\n            <div>\n                <Button\n                    variant=\"contained\"\n                    style={{backgroundColor: \"#ff7c01\"}}\n                    onClick={handleToggle}\n                >\n                    Compare!\n                </Button>\n                <Dialog\n                    style={{fontSize: \"1vw\"}}\n                    open={open}\n                    onClose={handleToggle}\n                    maxWidth=\"lg\"\n                >\n                    <DialogContent>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell> </TableCell>\n                                    <TableCell align=\"left\">{clinicOne.type} </TableCell>\n                                    <TableCell align=\"left\">{clinicTwo.type} </TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {rows.map(row => (\n                                    <TableRow key={row.name} style={{minWidth: 0}}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {row.name === \"Price\" ? (\n                                                <Fragment>\n                                                    Price\n                                                    <MyButton\n                                                        onClick={handlePriceToggle}\n                                                        tip=\"More Details\"\n                                                    >\n                                                        <Typography variant=\"subtitle1\">Expand</Typography>\n                                                        <ExpandMoreIcon/>\n                                                    </MyButton>\n                                                    <Dialog open={priceOpen} onClose={handlePriceToggle}>\n                                                        <DialogContent>\n                                                            <p\n                                                                style={{\n                                                                    fontWeight: \"bold\",\n                                                                    textDecoration: \"underline\"\n                                                                }}\n                                                            >\n                                                                Cost Breakdown based on your Age, Nationality & Eligible\n                                                                Subsidies\n                                                            </p>\n                                                            <Table>\n                                                                <TableHead>\n                                                                    <TableRow>\n                                                                        <TableCell/>\n                                                                        <TableCell\n                                                                            style={{minWidth: 200, maxWidth: 200}}\n                                                                            align=\"right\"\n                                                                        >\n                                                                            {\" \"}\n                                                                            {clinicOne.type}\n                                                                        </TableCell>\n\n                                                                        <TableCell\n                                                                            style={{minWidth: 200, maxWidth: 200}}\n                                                                            align=\"right\"\n                                                                        >\n                                                                            {clinicTwo.type}\n                                                                        </TableCell>\n                                                                    </TableRow>\n                                                                </TableHead>\n                                                                <TableBody>\n                                                                    <TableRow>\n                                                                        <TableCell component=\"th\" scope=\"row\">\n                                                                            <span style={{fontWeight: \"bolder\"}}>\n                                                                                Name\n                                                                            </span>\n                                                                        </TableCell>\n                                                                        <TableCell component=\"th\" scope=\"row\">\n                                                                            <span style={{fontWeight: \"bolder\"}}>\n                                                                            {clinicOne.name}\n                                                                            </span>\n                                                                        </TableCell>\n                                                                        <TableCell component=\"th\" scope=\"row\">\n                                                                            <span style={{fontWeight: \"bolder\"}}>\n                                                                            {\" \"}\n                                                                                {clinicTwo.name}\n                                                                            </span>\n                                                                        </TableCell>\n                                                                    </TableRow>\n                                                                    {consultationPriceRows.map(row => (\n                                                                        <TableRow key={row.name}>\n                                                                            <TableCell component=\"th\"\n                                                                                       scope=\"row\">\n                                                                                {row.name}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicOne.type === \"GP\"\n                                                                                    ? isNaN(row.gp)\n                                                                                        ? row.gp\n                                                                                        : xlsx.SSF.format('$0.00', row.gp)\n                                                                                    : isNaN(row.pc)\n                                                                                        ? row.pc\n                                                                                        : xlsx.SSF.format('$0.00', row.pc)}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicTwo.type === \"GP\"\n                                                                                    ? isNaN(row.gp)\n                                                                                        ? row.gp\n                                                                                        : xlsx.SSF.format('$0.00', row.gp)\n                                                                                    : isNaN(row.pc)\n                                                                                        ? row.pc\n                                                                                        : xlsx.SSF.format('$0.00', row.pc)}\n                                                                            </TableCell>\n                                                                        </TableRow>\n                                                                    ))}\n                                                                    {drugPriceLabel.map(row => (\n                                                                        <TableRow key={row.name}>\n                                                                            <TableCell component=\"th\" scope=\"row\">\n                                                                                {row.name}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicOne.type === \"GP\"\n                                                                                    ? row.gp\n                                                                                    : row.pc}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicTwo.type === \"GP\"\n                                                                                    ? row.gp\n                                                                                    : row.pc}\n                                                                            </TableCell>\n                                                                        </TableRow>\n                                                                    ))}\n                                                                    {drugPriceRows.map(row => (\n                                                                        <TableRow key={row.name}>\n                                                                            <TableCell component=\"th\" scope=\"row\">\n                                                                                {row.name}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicOne.type === \"GP\"\n                                                                                    ? isNaN(row.gp)\n                                                                                        ? row.gp\n                                                                                        : xlsx.SSF.format('$0.00', row.gp * 30)\n                                                                                    : isNaN(row.pc)\n                                                                                        ? row.pc\n                                                                                        : xlsx.SSF.format('$0.00', row.pc * 30)}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicTwo.type === \"GP\"\n                                                                                    ? isNaN(row.gp)\n                                                                                        ? row.gp\n                                                                                        : xlsx.SSF.format('$0.00', row.gp * 30)\n                                                                                    : isNaN(row.pc)\n                                                                                        ? row.pc\n                                                                                        : xlsx.SSF.format('$0.00', row.pc * 30)}\n                                                                            </TableCell>\n                                                                        </TableRow>\n                                                                    ))}\n                                                                    {testPriceLabel.map(row => (\n                                                                        <TableRow key={row.name}>\n                                                                            <TableCell component=\"th\"\n                                                                                       scope=\"row\">\n                                                                                {row.name}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicOne.type === \"GP\"\n                                                                                    ? row.gp\n                                                                                    : row.pc}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicTwo.type === \"GP\"\n                                                                                    ? row.gp\n                                                                                    : row.pc}\n                                                                            </TableCell>\n                                                                        </TableRow>\n                                                                    ))}\n                                                                    {testPriceRows.map(row => (\n                                                                        <TableRow key={row.name}>\n                                                                            <TableCell component=\"th\"\n                                                                                       scope=\"row\">\n                                                                                {row.name}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicOne.type === \"GP\"\n                                                                                    ? isNaN(row.gp)\n                                                                                        ? row.gp\n                                                                                        : xlsx.SSF.format('$0.00', row.gp * 30)\n                                                                                    : isNaN(row.pc)\n                                                                                        ? row.pc\n                                                                                        : xlsx.SSF.format('$0.00', row.pc * 30)}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicTwo.type === \"GP\"\n                                                                                    ? isNaN(row.gp)\n                                                                                        ? row.gp\n                                                                                        : xlsx.SSF.format('$0.00', row.gp * 30)\n                                                                                    : isNaN(row.pc)\n                                                                                        ? row.pc\n                                                                                        : xlsx.SSF.format('$0.00', row.pc * 30)}\n                                                                            </TableCell>\n                                                                        </TableRow>\n                                                                    ))}\n                                                                </TableBody>\n                                                            </Table>\n                                                        </DialogContent>\n                                                    </Dialog>\n                                                </Fragment>\n                                            ) : (\n                                                <Fragment>{row.name}</Fragment>\n                                            )}\n                                        </TableCell>\n                                        <TableCell align=\"left\" style={{minWidth: 210}}>{row.gp}</TableCell>\n                                        <TableCell align=\"left\" style={{minWidth: 210}}>{row.pc} </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                            <TableFooter>\n                                <TableCell align=\"right\">\n                                    <Button/>\n                                </TableCell>\n\n\n                                <TableCell align=\"right\">\n                                    <Button\n                                        variant=\"contained\"\n                                        style={{backgroundColor: \"#ff7c01\"}}\n                                    >\n                                        <Link\n                                            to={{\n                                                pathname: \"/ConfirmClinicChoice\",\n                                                state: {\n                                                    choice: clinicOne,\n                                                    formData: this.props.formData\n                                                }\n                                            }}\n                                        >\n                                            <span style={{color: \"white\"}}>Select</span>\n                                        </Link>\n                                    </Button>\n                                </TableCell>\n\n\n                                <TableCell align=\"right\">\n                                    <Button\n                                        // style={{ fontSize: \"1vw\" }}\n                                        variant=\"contained\"\n                                        style={{backgroundColor: \"#ff7c01\"}}\n                                    >\n                                        <Link\n                                            to={{\n                                                pathname: \"/ConfirmClinicChoice\",\n                                                state: {\n                                                    choice: clinicTwo,\n                                                    formData: this.props.formData\n                                                }\n                                            }}\n                                        >\n                                            <span style={{color: \"white\"}}>Select</span>\n                                        </Link>\n                                    </Button>\n                                </TableCell>\n                            </TableFooter>\n                        </Table>\n                    </DialogContent>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default CompareDialog;\n","import React, { useEffect, Fragment } from \"react\";\nimport { makeStyles\n} from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Button from \"@material-ui/core/Button\";\nimport { Link } from \"react-router-dom\";\nimport CompareDialog from \"./CompareDialog\";\n\nimport {\n  DialogContent\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    width: \"100%\"\n  }\n}));\n// Displays the selected clinics tabs for comparison at the top in the FilteredResult page. Used by ResultsTab.\n// Allows for the tabs to be clicked on and display clinic information.\n// FilteredResult --> ResultsTab --> CompareBlock\nconst CompareBlock = props => {\n  const classes = useStyles();\n  const [clinicOne, setClinicOne] = React.useState();\n  const [clinicTwo, setClinicTwo] = React.useState();\n  const [open, setOpen] = React.useState(false);\n  const [openTwo, setOpenTwo] = React.useState(false);\n\n  useEffect(() => {\n    setClinicOne(props.clinicOne);\n    setClinicTwo(props.clinicTwo);\n  },[props.clinicOne, props.clinicTwo]);\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClickOpenTwo() {\n    setOpenTwo(true);\n  }\n\n  function handleClickClose() {\n    setOpen(false);\n  }\n  function handleClickCloseTwo() {\n    setOpenTwo(false);\n  }\n  return (\n    <div className={classes.root}>\n      {clinicOne && clinicOne.type === \"GP\" ? (\n        <Fragment>\n          <Chip\n            label={clinicOne.name}\n            clinic={clinicOne}\n            onClick={handleClickOpen}\n            onDelete={props.callbackDeleteOne}\n            color=\"primary\"\n          />\n          <Dialog open={open} onClose={handleClickClose}>\n            <DialogContent>\n              <img\n                src={\n                  process.env.PUBLIC_URL +\n                  `/ClinicPictures/${clinicOne.properties.FILE_NAME}.png`\n                }\n                alt=\"clinic\"\n                style={{ width: \"100%\" }}\n              />\n              <hr />\n              <span style={{fontWeight:\"bold\"}}>{clinicOne.properties.HCI_NAME} </span> {/*clinicOne Name*/}\n              <br/>\n              {parseFloat(clinicOne.distance).toFixed(2)}km away {/*Distance*/}\n              <hr />\n              <span style={{fontWeight: \"bold\"}}>{clinicOne.properties.DR_NAME} {/*Doctor Name*/} </span>\n              <br/>\n              <br />\n              <span style={{fontWeight: \"bold\"}}>Telephone: </span>\n              <br/>\n              {clinicOne.properties.Tel} <br />\n              <hr />\n              <span style={{fontWeight:\"bold\"}}>Opening Hours:</span>\n              <br/>\n              {clinicOne.properties.ALL_OPENING_HOURS.map(period => (\n                  <p>\n                    {period.day_string}\n                    <br />\n                    {period.opening_hours.join(\", \")}\n                  </p>\n              ))}\n              <hr />\n              <span style={{fontWeight:\"bold\"}}>Address: </span><br/>\n              {clinicOne.properties.BLK_HSE_NO} {clinicOne.properties.STREET_NAME} #\n              {clinicOne.properties.FLOOR_NO}-{clinicOne.properties.UNIT_NO}{\" \"}\n              {clinicOne.properties.BUILDING_NAME} Singapore{\" \"}\n              {clinicOne.properties.PostalCode}\n              <hr/>\n              <p style={{fontWeight: \"bold\"}}>Directions:</p>\n              {clinicOne.properties.ALL_DIRECTIONS.map(path => (\n                  <p>\n                    {path.transport_string}\n                    <br />\n                    {path.directions.join(\", \")}\n                  </p>\n              ))}\n              <hr />\n              <Link\n                to={{\n                  pathname: \"/ConfirmClinicChoice\",\n                  state: {\n                    choice: clinicOne,\n                    formData: props.formData\n                  }\n                }}\n              >\n                <Button size=\"large\" style={{ backgroundColor: \"#ff7c01\" }}>\n                  <span style={{ textDecoration: \"none\", color: \"white\" }}>\n                    Select\n                  </span>\n                </Button>\n              </Link>\n            </DialogContent>\n          </Dialog>\n        </Fragment>\n      ) : clinicOne ? (\n        <Fragment>\n          <Chip\n            label={clinicOne.name}\n            clinic={clinicOne}\n            onClick={handleClickOpen}\n            onDelete={props.callbackDeleteOne}\n            color=\"secondary\"\n          />\n          <Dialog open={open} onClose={handleClickClose}>\n            <DialogContent>\n              <span style={{fontWeight:\"bold\"}}>{clinicOne.Name} <br /> {/*clinicOne Name*/}</span>\n              {parseFloat(clinicOne.distance).toFixed(2)}km away {/*Distance*/}\n              <hr />\n\n              Telephone: {clinicOne.Tel}\n              <hr />\n\n              <span style={{fontWeight:\"bold\"}}>Opening Hours:</span>\n              <br/>\n              {clinicOne.ALL_OPENING_HOURS.map(period => (\n                  <p>\n                    {period.day_string}\n                    <br />\n                    {period.opening_hours.join(\", \")}\n                  </p>\n              ))}\n\n              <hr/>\n              <span style={{fontWeight:\"bold\"}}>Address: </span>\n              <br/>\n              {clinicOne.Address}{\" \"}\n              Singapore {clinicOne.PostalCode}\n              <hr />\n\n              <span style={{fontWeight:\"bold\"}}>Directions:</span>\n              <br/>\n              {clinicOne.ALL_DIRECTIONS.map(path => (\n                  <p>\n                    {path.transport_string}\n                    <br />\n                    {path.directions.join(\", \")}\n                  </p>\n              ))}\n              <hr />\n              <Link\n                to={{\n                  pathname: \"/ConfirmClinicChoice\",\n                  state: {\n                    choice: clinicOne,\n                    formData: props.formData\n                  }\n                }}\n              >\n                <Button size=\"large\" style={{ backgroundColor: \"#ff7c01\" }}>\n                  <span style={{ textDecoration: \"none\", color: \"white\" }}>\n                    Select\n                  </span>\n                </Button>\n              </Link>\n            </DialogContent>\n          </Dialog>\n        </Fragment>\n      ) : (\n        console.log(\"\")\n      )}\n      {clinicTwo && clinicTwo.type === \"Polyclinic\" ? (\n        <Fragment>\n          <Chip\n            label={clinicTwo.name}\n            clinic={clinicTwo}\n            onClick={handleClickOpenTwo}\n            onDelete={props.callbackDeleteTwo}\n            color=\"secondary\"\n          />\n          <br />\n          <br />\n          <Dialog open={openTwo} onClose={handleClickCloseTwo}>\n            <DialogContent>\n              <span style={{fontWeight:\"bold\"}}>{clinicTwo.Name} <br /> {/*Clinic Name*/}</span>\n              {parseFloat(clinicTwo.distance).toFixed(2)}km away {/*Distance*/}\n              <hr />\n\n              Telephone: {clinicTwo.Tel}\n              <hr />\n\n              <span style={{fontWeight:\"bold\"}}>Opening Hours:</span>\n              <br/>\n              {clinicTwo.ALL_OPENING_HOURS.map(period => (\n                  <p>\n                    {period.day_string}\n                    <br />\n                    {period.opening_hours.join(\", \")}\n                  </p>\n              ))}\n\n              <hr/>\n              <span style={{fontWeight:\"bold\"}}>Address: </span>\n              <br/>\n              {clinicTwo.Address}{\" \"}\n              Singapore {clinicTwo.PostalCode}\n              <hr />\n\n              <span style={{fontWeight:\"bold\"}}>Directions:</span>\n              <br/>\n              {clinicTwo.ALL_DIRECTIONS.map(path => (\n                  <p>\n                    {path.transport_string}\n                    <br />\n                    {path.directions.join(\", \")}\n                  </p>\n              ))}\n              <hr />\n\n\n              \n              <Link\n                to={{\n                  pathname: \"/ConfirmClinicChoice\",\n                  state: {\n                    choice: clinicTwo,\n                    formData: props.formData\n                  }\n                }}\n              >\n                <Button size=\"large\" style={{ backgroundColor: \"#ff7c01\" }}>\n                  <span style={{ textDecoration: \"none\", color: \"white\" }}>\n                    Select\n                  </span>\n                </Button>\n              </Link>\n            </DialogContent>\n          </Dialog>\n        </Fragment>\n      ) : clinicTwo ? (\n        <Fragment>\n          <Chip\n            label={clinicTwo.name}\n            clinic={clinicTwo}\n            onClick={handleClickOpenTwo}\n            onDelete={props.callbackDeleteTwo}\n            color=\"primary\"\n          />\n          <Dialog open={openTwo} onClose={handleClickCloseTwo}>\n            <DialogContent>\n              <img\n                src={\n                  process.env.PUBLIC_URL +\n                  `/ClinicPictures/${clinicTwo.properties.FILE_NAME}.png`\n                }\n                alt=\"clinic\"\n                style={{ width: \"100%\" }}\n              />\n              <hr />\n              <span style={{fontWeight:\"bold\"}}>{clinicTwo.properties.HCI_NAME} </span> {/*Clinic Name*/}\n              <br/>\n              {parseFloat(clinicTwo.distance).toFixed(2)}km away {/*Distance*/}\n              <hr />\n              <span style={{fontWeight: \"bold\"}}>{clinicTwo.properties.DR_NAME} {/*Doctor Name*/} </span>\n              <br/>\n              <br />\n              <span style={{fontWeight: \"bold\"}}>Telephone: </span>\n              <br/>\n              {clinicTwo.properties.Tel} <br />\n              <hr />\n              <span style={{fontWeight:\"bold\"}}>Opening Hours:</span>\n              <br/>\n              {clinicTwo.properties.ALL_OPENING_HOURS.map(period => (\n                  <p>\n                    {period.day_string}\n                    <br />\n                    {period.opening_hours.join(\", \")}\n                  </p>\n              ))}\n              <hr />\n              <span style={{fontWeight:\"bold\"}}>Address: </span><br/>\n              {clinicTwo.properties.BLK_HSE_NO} {clinicTwo.properties.STREET_NAME} #\n              {clinicTwo.properties.FLOOR_NO}-{clinicTwo.properties.UNIT_NO}{\" \"}\n              {clinicTwo.properties.BUILDING_NAME} Singapore{\" \"}\n              {clinicTwo.properties.PostalCode}\n              <hr/>\n              <p style={{fontWeight: \"bold\"}}>Directions:</p>\n              {clinicTwo.properties.ALL_DIRECTIONS.map(path => (\n                  <p>\n                    {path.transport_string}\n                    <br />\n                    {path.directions.join(\", \")}\n                  </p>\n              ))}\n              <hr />\n\n\n              <Link\n                to={{\n                  pathname: \"/ConfirmClinicChoice\",\n                  state: {\n                    choice: clinicTwo,\n                    userNationality: props.formData.userNationality,\n                    userSubsidyType: props.formData.userSubsidyType,\n                    userAge: props.formData.userAge\n                  }\n                }}\n              >\n                <Button size=\"large\" style={{ backgroundColor: \"#ff7c01\" }}>\n                  <span style={{ textDecoration: \"none\", color: \"white\" }}>\n                    Select\n                  </span>\n                </Button>\n              </Link>\n            </DialogContent>\n          </Dialog>\n          <br />\n          <br />\n        </Fragment>\n      ) : (\n        console.log(\"\")\n      )}\n\n      {clinicOne && clinicTwo ? (\n        <Fragment>\n          <Grid style={{ flexGrow: 1 }} direction=\"row\">\n            <Grid container justify=\"center\">\n              <CompareDialog\n                clinicOne={clinicOne}\n                clinicTwo={clinicTwo}\n                formData={props.formData}\n              />\n            </Grid>\n          </Grid>\n          <hr />\n        </Fragment>\n      ) : (\n        <div />\n      )}\n    </div>\n  );\n};\nexport default CompareBlock;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ClinicMap from \"./map/ClinicMap\";\nimport PcDialog from \"./PcDialog\";\nimport GpDialog from \"./GpDialog\";\nimport CompareBlock from \"./comparison/CompareBlock\";\nimport Pagination from \"react-js-pagination\";\nfunction TabContainer({ children, dir }) {\n  return (\n    <Typography component=\"div\" dir={dir} style={{ padding: 8 * 3 }}>\n      {children}\n    </Typography>\n  );\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n  dir: PropTypes.string.isRequired\n};\n// Displays the 3 tabs of PC,GP and Map in the results page\n// Also displays the chosen clinics for comparison (DisplayBlock.js)\n\nconst ResultTabs = props => {\n  const theme = useTheme();\n  const [value, setValue] = React.useState(0);\n\n  function handleChange(event, newValue) {\n    setValue(newValue);\n  }\n\n  function handleChangeIndex(index) {\n    setValue(index);\n  }\n  const [open, setOpen] = React.useState(false);\n  const [clinicOne, setClinicOne] = React.useState();\n  const [clinicTwo, setClinicTwo] = React.useState();\n\n  const [activeGPPage, setActiveGPPage] = React.useState(1);\n  const [activePCPage, setActivePCPage] = React.useState(1);\n  const [itemPerPage] = React.useState(10);\n\n  const handleGPClose = (clinic, name) => {\n    setOpen(false);\n    clinic.price = \"$$\";\n    clinic.rating = \"4.3\";\n    clinic.type = \"GP\";\n    clinic.name = name;\n    if (\n      (clinicOne || clinicTwo) &&\n      (clinic === clinicOne || clinic === clinicTwo)\n    ) {\n      alert(\"Cannot compare two same clinics!\");\n    } else if (!clinicOne) {\n      setClinicOne(clinic);\n    } else if (!clinicTwo) {\n      setClinicTwo(clinic);\n    } else {\n      alert(\"Cannot compare more than 2 clinics\");\n    }\n  };\n\n  \n  const handlePCClose = (clinic, name) => {\n    setOpen(false);\n    clinic.price = \"$\";\n    clinic.rating = \"4.0\";\n    clinic.name = name;\n    clinic.type = \"Polyclinic\";\n    if (\n      (clinicOne || clinicTwo) &&\n      (clinic === clinicOne || clinic === clinicTwo)\n    ) {\n      alert(\"Cannot compare two same clinics!\");\n    } else if (!clinicOne) {\n      setClinicOne(clinic);\n    } else if (!clinicTwo) {\n      setClinicTwo(clinic);\n    } else {\n      alert(\"Cannot compare more than 2 clinics\");\n    }\n  };\n  const callbackFunction = clinic => {\n    if (\n      (clinicOne || clinicTwo) &&\n      (clinic === clinicOne || clinic === clinicTwo)\n    ) {\n      alert(\"Cannot compare two same clinics!\");\n    } else if (!clinicOne) {\n      setClinicOne(clinic);\n    } else if (!clinicTwo) {\n      setClinicTwo(clinic);\n    } else {\n      alert(\"Cannot compare more than 2 clinics\");\n    }\n  };\n  const callbackDeleteOne = () => {\n    setClinicOne(null);\n  };\n  const callbackDeleteTwo = () => {\n    setClinicTwo(null);\n  };\n\n  const handleGPPageChange = pageNumber => {\n    setActiveGPPage(pageNumber);\n  };\n  const handlePCPageChange = pageNumber => {\n    setActivePCPage(pageNumber);\n  };\n  var indexOfLastTodoGP = activeGPPage * itemPerPage;\n  var indexOfFirstTodoGP = indexOfLastTodoGP - itemPerPage;\n  var filteredGPTemp = props.GP.slice(indexOfFirstTodoGP, indexOfLastTodoGP);\n\n  const filteredGP = filteredGPTemp.map(clinic => {\n    return (\n      <div key={clinic.properties.id}>\n        <GpDialog\n          clinic={clinic}\n          selectedGP={clinic}\n          open={open}\n          onClose={handleGPClose}\n          formData={props.formData}\n        />\n        <hr />\n      </div>\n    );\n  });\n  var indexOfLastTodoPC = activePCPage * itemPerPage;\n  var indexOfFirstTodoPC = indexOfLastTodoPC - itemPerPage;\n  var filteredPCTemp = props.PC.slice(indexOfFirstTodoPC, indexOfLastTodoPC);\n\n  const filteredPC = filteredPCTemp.map(clinic => {\n    return (\n      <div key={clinic.id}>\n        <PcDialog\n          clinic={clinic}\n          selectedPC={clinic}\n          open={open}\n          onClose={handlePCClose}\n          formData={props.formData}\n        />\n        <hr />\n      </div>\n    );\n  });\n  return (\n    //callback delete methods required because it is the state here in ResultTabs that needs to be changed, as the\n    // clinicOne and clinicTwo state of displayBlock is taken from the state here. If the state here is not changed,\n    // after we delete in DisplayBlock, when it re-renders the displayBlock state will get the old (unchanged) state\n    // from here instead and nothing would have changed (delete fail).\n    <div>\n      <CompareBlock\n        clinicOne={clinicOne}\n        clinicTwo={clinicTwo}\n        formData={props.formData}\n        callbackDeleteOne={callbackDeleteOne}\n        callbackDeleteTwo={callbackDeleteTwo}\n      />\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n        >\n          <Tab label=\"GP\" />\n          <Tab label=\"Polyclinic\" />\n          <Tab label=\"Map View\" />\n        </Tabs>\n      </AppBar>\n      <SwipeableViews\n        axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\n        index={value}\n        onChangeIndex={handleChangeIndex}\n      >\n        <TabContainer dir={theme.direction}>\n          {filteredGP}\n          <Pagination\n            hideDisabled\n            activePage={activeGPPage}\n            itemsCountPerPage={itemPerPage}\n            totalItemsCount={props.GP.length}\n            // pageRangeDisplayed={5}\n            onChange={handleGPPageChange}\n          />\n        </TabContainer>\n        <TabContainer dir={theme.direction}>\n          {filteredPC}\n          <Pagination\n            default\n            activePage={activePCPage}\n            itemsCountPerPage={itemPerPage}\n            totalItemsCount={props.PC.length}\n            pageRangeDisplayed={5}\n            onChange={handlePCPageChange}\n          />\n        </TabContainer>\n        <TabContainer dir={theme.direction}>\n          {props.currentLoc[0] !== 0 && (\n            <ClinicMap\n              coord={props.currentLoc}\n              GP={props.GP}\n              PC={props.PC}\n              callbackFunction={callbackFunction}\n            />\n          )}\n        </TabContainer>\n      </SwipeableViews>\n    </div>\n  );\n};\n\nexport default ResultTabs;\n","import React from \"react\";\nimport GP from \"../data/pcn.json\";\nimport * as turf from \"@turf/turf\";\nimport ResultTabs from \"../components/ResultTabs.js\";\nimport PC from \"../data/newPolyclinics.json\";\nimport Switch from \"@material-ui/core/Switch\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBack from \"@material-ui/icons/ArrowBackIos\";\nimport HelpOutline from \"@material-ui/icons/HelpOutline\";\nimport {Link} from \"react-router-dom\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport {FormLabel} from \"@material-ui/core\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Button from '@material-ui/core/Button';\nimport cfg from \"../etc/config.json\";\n\n// this component aims to display the filtered clinic after they fill in the form\n//try not to abuse the API call, im using some kind of free credits from google for this\n//api to be able to consistenly make the api call\n\n//api in use here are: google geocode & turf\n//everything works except for styling, but the content from the json file abit lacking,\n// no opening hrs etc\nclass FilteredResult extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            formData: this.props.location.state, //this gets the info from react router from PatientForm.js\n            userLng: this.props.location.state.userLng,\n            userLat: this.props.location.state.userLat,\n            sortByLoc: false, //3km radius\n            open: false,\n            userNotifDialog: true\n            // searchedClinic: {}\n        };\n        this.goBack = this.goBack.bind(this);\n        this.handleUserNotifToggle = this.handleUserNotifToggle.bind(this);\n        // this.routeChange = this.routeChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch(`${cfg.backend_svc}/googleMap/getGeoLoc`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                postalCode: this.state.formData.postalCode,\n            })\n        })\n            .then(res => res.json())\n            .then(json => {\n                this.setState({\n                    userLng: json.results[0].geometry.location.lng,\n                    userLat: json.results[0].geometry.location.lat\n                });\n            });\n    }\n\n    handleUserNotifToggle() {\n        this.setState({userNotifDialog: !this.state.userNotifDialog});\n    }\n\n    goBack() {\n        this.props.history.goBack();\n    }\n\n    // routeChange = () => {\n    //   let path = `/FilteredResult/Search`;\n    //   this.props.history.push(path);\n    // };\n\n    render(props) {\n        const {userLat, userLng, formData, sortByLoc} = this.state;\n        const userNotification = (\n                <Dialog open={this.state.userNotifDialog} onClose={this.handleUserNotifToggle}>\n                    <DialogContent style={{font: \"\"}}>\n                        Hello! This app is still in its <span style={{fontWeight:\"bold\"}}> BETA </span> phase and the prices available for comparison are limited\n                        to\n                        some of the more common drugs for diabetic patients.\n                        <br/><br/>\n                        Do checkout our different features: <br/>\n                        - <span style={{fontWeight:\"bold\"}}>Map View Feature</span> : press 'MAP VIEW' <br/>\n                        - <span style={{fontWeight:\"bold\"}}>Compare Between Clinics</span>: select any 2 clinics from the list or MapView,\n                        and press 'add to comparison'\n                        <br/>\n                        <hr/>\n                        <span style={{fontStyle:\"italic\",fontSize:\"small\"}}>Please help us out by submitting any feedback you have at the end of the app. Thank you for your\n                            support! </span>\n                    </DialogContent>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.handleUserNotifToggle} size=\"large\">\n                        Continue\n                    </Button>\n                </Dialog>\n        );\n        const filteredGP = GP.features.filter(clinic => {\n            clinic.name = clinic.properties.HCI_NAME;\n            const from = turf.point([userLng, userLat]);\n            const to = turf.point([\n                clinic.geometry.coordinates[0],\n                clinic.geometry.coordinates[1]\n            ]);\n            const options = {units: \"kilometers\"};\n            const dist = turf.distance(from, to, options);\n            clinic.distance = dist;\n            if (sortByLoc) {\n                return dist <= 3;\n            } else {\n                return true;\n            }\n        });\n\n        const filteredPC = PC.clinics.filter(clinic => {\n            clinic.name = clinic.Name;\n            const from = turf.point([userLng, userLat]);\n            const to = turf.point([clinic.coord[0], clinic.coord[1]]);\n            const options = {units: \"kilometers\"};\n            const dist = turf.distance(from, to, options);\n            clinic.distance = dist;\n            return dist <= 100;\n        });\n\n        function sortDist(a, b) {\n            if (a.distance < b.distance) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n\n        const toggleDistSort = () => {\n            this.setState({sortByLoc: !sortByLoc});\n        };\n        const sortedGP = filteredGP.sort(sortDist);\n        const sortedPC = filteredPC.sort(sortDist);\n        const help = () => {\n            alert(\n                \"Clinics are sorted by distance; nearest at the top.\" +\n                \"\\n\\n\" +\n                \"Map view is available at the rightmost tab.\" +\n                \"\\n\\n\" +\n                \"Toggle the 'Filter by 3km radius' switch to choose between displaying all clinics or just clinics within your 3km radius.\" +\n                \"\\n\\n\" +\n                \"Add two clinics to comparison to activate the compare feature!\" +\n                \"\\n\\n\" +\n                \"Select a clinic to move on!\" +\n                \"\\n\\n\\n\\n\\n\" +\n                \"For any further enquiries please contact pathway@u.nus.edu\"\n            );\n        };\n        return (\n            <div>\n                <AppBar position=\"static\" style={{backgroundColor: \"#ff7c01\"}}>\n                    <Toolbar>\n                        <Link to=\"/Form\" style={{textDecoration: \"none\", color: \"white\"}}>\n                            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                                <ArrowBack/>\n                                <Typography variant=\"subtitle1\">Back</Typography>\n                            </IconButton>{\" \"}\n                        </Link>\n                        <Typography variant=\"h6\" align=\"center\" style={{flexGrow: 1}}>\n                            Filtered clinics for{\" \"}\n                            <span style={{textDecoration: \"underline\", fontWeight: \"bold\"}}>\n                S{formData.postalCode}\n              </span>{\" \"}\n                            {formData.subsidyType === \"\"\n                                ? \"\"\n                                : `with ${formData.subsidyType} subsidy`}\n                            <br/>\n                            <FormLabel style={{color: \"white\"}}>\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={this.state.sortByLoc}\n                                            value={this.state.sort}\n                                            onChange={toggleDistSort}\n                                            inputProps={{\"aria-label\": \"primary checkbox\"}}\n                                            color=\"primary\"\n                                        />\n                                    }\n                                    label=\"Filter by 3km radius\"\n                                    labelPlacement=\"start\"\n                                />\n                            </FormLabel>\n                        </Typography>\n                        {/* <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"menu\"\n              onClick={this.routeChange}\n            >\n              <SearchIcon callbackFunc={callbackFunc} />\n              {console.log(GP)}\n            </IconButton>{\" \"} */}\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            onClick={help}\n                        >\n                            <Typography variant=\"subtitle1\">Help </Typography> <HelpOutline/>\n                        </IconButton>{\" \"}\n                    </Toolbar>\n                </AppBar>\n                {userNotification}\n                <div>\n                    <hr/>\n                    <ResultTabs\n                        GP={sortedGP}\n                        PC={sortedPC}\n                        formData={formData}\n                        // searchedClinic={this.searchedClinic}\n                        currentLoc={[this.state.userLng, this.state.userLat]}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FilteredResult;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Typography, Button} from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBack from \"@material-ui/icons/ArrowBackIos\";\nimport ArrowNext from \"@material-ui/icons/NavigateNext\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport consultationPrices from \"../data/consultationPrices\";\nimport drugPrices from \"../data/drugPrices\";\nimport testPrices from \"../data/testPrices\";\n\nvar xlsx = require(\"xlsx\");\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(3, 3)\n  }\n}));\n\nconst ConfirmClinicChoice = props => {\n  const classes = useStyles();\n  function goBack() {\n    props.history.goBack();\n  }\n  const [choice] = React.useState(props.location.state.choice);\n  const [userNationality] = React.useState(props.location.state.formData.nationality)\n  const [userSubsidyType] = React.useState(props.location.state.formData.subsidyType)\n  const [userAge] = React.useState(props.location.state.formData.age)\n\n  function createData(name, gp, pc) {\n    return { name, gp, pc };\n  }\n  const consultationPriceRows = consultationPrices.consultation.map(function (data) {\n    return createData(\n        data.Description,\n        userNationality === \"SG\"\n            ? userSubsidyType === \"PG\"\n            ? data.PCN_Price.PG\n            : userSubsidyType === \"MG\"\n                ? data.PCN_Price.MG\n                : userSubsidyType === \"CHAS Blue\" || userSubsidyType === \"CHAS Orange\"\n                    ? data.PCN_Price.BLUE_CHAS\n                    : data.PCN_Price.NON_CHAS\n            : data.PCN_Price.NON_RESIDENT,\n        userNationality === \"Singaporean\"\n            ? userSubsidyType === \"PG\"\n            ? data.Polyclinic_Price.PG\n            : userSubsidyType === \"MG\"\n                ? data.Polyclinic_Price.MG\n                : userAge < 18 || userAge >= 65\n                    ? data.Polyclinic_Price.SG_CHILD_ELDERLY\n                    : data.Polyclinic_Price.SG_ADULT\n            : userNationality === \"Permanent Resident\"\n            ? data.Polyclinic_Price.PR\n            : data.Polyclinic_Price.NON_RESIDENT\n    )\n  })\n  const drugPriceRows = drugPrices.drugs.map(function (data) {\n    return createData(\n        data.Name + \": \" + data.Description,\n        userNationality === \"Singaporean\"\n            ? userSubsidyType === \"CHAS Orange\" || userSubsidyType === \"CHAS Blue\"\n            ? data.PCN_Price.ORANGE_CHAS\n            : userSubsidyType === \"PG\"\n                ? data.PCN_Price.PG_CHAS\n                : data.PCN_Price.NON_CHAS\n            : data.PCN_Price.NON_SG,\n        userNationality === \"Singaporean\"\n            ? userAge >= 65\n            ? userSubsidyType === \"PG\"\n                ? data.Polyclinic_Price.PG\n                : userSubsidyType === \"MG\"\n                    ? data.Polyclinic_Price.MG_above65\n                    : data.Polyclinic_Price.noPG_above65\n            : userSubsidyType === \"MG\"\n                ? data.Polyclinic_Price.MG_below65\n                : data.Polyclinic_Price.below65\n            : data.Polyclinic_Price.nonSG\n    )\n  });\n  const testPriceRows = testPrices.tests.map(function (data) {\n        return createData(\n            data.Name + \": \" + data.Description,\n            userNationality === \"Singaporean\"\n                ? userSubsidyType === \"PG\"\n                ? data.PCN_Price.PG\n                : userSubsidyType === \"MG\"\n                    ? data.PCN_Price.MG\n                    : userSubsidyType === \"CHAS Orange\" || userSubsidyType === \"CHAS Blue\"\n                        ? data.PCN_Price.ORANGE_CHAS\n                        : data.PCN_Price.Non_CHAS\n                : userNationality === \"Permanent Resident\"\n                ? data.PCN_Price.PR\n                : data.PCN_Price.NON_RESIDENT,\n            userNationality === \"Singaporean\"\n                ? userAge < 18 || userAge >= 65\n                ? data.Polyclinic_Price.SG_CHILD_ELDERLY\n                : data.Polyclinic_Price.SG\n                : userNationality === \"Permanent Resident\"\n                ? data.Polyclinic_Price.PR\n                : data.Polyclinic_Price.NON_RESIDENT\n        )\n      }\n  )\n  const drugPriceLabel = [\n    createData(\n        <span style={{fontWeight: \"bold\"}}>Drug prices/month</span>,\n        <span style={{fontWeight: \"bold\"}}>Estimated drug prices per month, ie 30 x tablet</span>,\n        <span style={{fontWeight: \"bold\"}}>Estimated drug prices per month, ie 30 x tablet</span>\n    )];\n\n  const testPriceLabel = [\n    createData(\n        <span style={{fontWeight: \"bold\"}}>Prices for Tests & Screenings</span>,\n        <span style={{fontWeight: \"bold\"}}>Prices for Tests & Screenings</span>,\n        <span style={{fontWeight: \"bold\"}}>Prices for Tests & Screenings</span>\n    )];\n\n  // const priceRows = consultationPriceRows.concat(drugPriceRows.concat(testPriceRows)).flatMap(function (data) {\n  //   return data;\n  // });\n  const result = (\n    <Paper sqaure=\"false\" className={classes.root}>\n      {choice.type === \"GP\" ? (\n        <Typography variant=\"body2\" align=\"center\" style={{ flexGrow: 1 }}>\n          <Typography variant=\"h5\" style={{ fontWeight: \"bold\" }}>\n            {choice.properties.HCI_NAME}\n          </Typography>{\" \"}\n          <br /> {choice.properties.BLK_HSE_NO}{\" \"}\n          {choice.properties.STREET_NAME} #{choice.properties.FLOOR_NO}-\n          {choice.properties.UNIT_NO} {choice.properties.BUILDING_NAME}{\" \"}\n          Singapore {choice.properties.PostalCode}\n          <br /> Telephone: {choice.properties.Tel} <br />\n          <hr />\n          <Typography variant=\"h6\" style={{ fontWeight: \"bolder\" }}>\n            Price breakdown:\n          </Typography>\n          <TableBody>\n            <TableRow>\n              <TableCell component=\"th\" scope=\"row\">\n                <span style={{ fontWeight: \"bolder\" }}>Description</span>\n              </TableCell>\n            </TableRow>\n            {consultationPriceRows.map(row=>(\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\"\n                             scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? isNaN(row.gp)\n                            ? row.gp\n                            : xlsx.SSF.format('$0.00', row.gp)\n                        : isNaN(row.pc)\n                            ? row.pc\n                            : xlsx.SSF.format('$0.00', row.pc)}\n                  </TableCell>\n                </TableRow>\n            ))}\n            {drugPriceLabel.map(row => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? row.gp\n                        : row.pc}\n                  </TableCell>\n                </TableRow>\n            ))}\n            {drugPriceRows.map(row => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? isNaN(row.gp)\n                            ? row.gp\n                            : xlsx.SSF.format('$0.00', row.gp * 30)\n                        : isNaN(row.pc)\n                            ? row.pc\n                            : xlsx.SSF.format('$0.00', row.pc * 30)}\n                  </TableCell>\n                </TableRow>\n            ))}\n            {testPriceLabel.map(row => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\"\n                             scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? row.gp\n                        : row.pc}\n                  </TableCell>\n                </TableRow>\n            ))}\n            {testPriceRows.map(row => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\"\n                             scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? isNaN(row.gp)\n                            ? row.gp\n                            : xlsx.SSF.format('$0.00', row.gp * 30)\n                        : isNaN(row.pc)\n                            ? row.pc\n                            : xlsx.SSF.format('$0.00', row.pc * 30)}\n                  </TableCell>\n                </TableRow>\n            ))}\n          </TableBody>\n        </Typography>\n      ) : (\n        <Typography variant=\"body1\" align=\"center\" style={{ flexGrow: 1 }}>\n          {\" \"}\n          Clinic Name: {choice.Name} <br /> Address: {choice.Address} Singapore{\" \"}\n          {choice.PostalCode}\n          <br /> Telephone: {choice.Tel} <br /> Distance:{\" \"}\n          {parseFloat(choice.distance).toFixed(2)}km away\n          <hr />\n          <Typography variant=\"h6\" style={{ fontWeight: \"bolder\" }}>\n            Price breakdown:\n          </Typography>\n          <TableBody>\n            <TableRow>\n              <TableCell component=\"th\" scope=\"row\">\n                <span style={{ fontWeight: \"bolder\" }}>Description</span>\n              </TableCell>\n            </TableRow>\n            {consultationPriceRows.map(row=>(\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\"\n                             scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? isNaN(row.gp)\n                            ? row.gp\n                            : xlsx.SSF.format('$0.00', row.gp)\n                        : isNaN(row.pc)\n                            ? row.pc\n                            : xlsx.SSF.format('$0.00', row.pc)}\n                  </TableCell>\n                </TableRow>\n            ))}\n            {drugPriceLabel.map(row => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? row.gp\n                        : row.pc}\n                  </TableCell>\n                </TableRow>\n            ))}\n            {drugPriceRows.map(row => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? isNaN(row.gp)\n                            ? row.gp\n                            : xlsx.SSF.format('$0.00', row.gp * 30)\n                        : isNaN(row.pc)\n                            ? row.pc\n                            : xlsx.SSF.format('$0.00', row.pc * 30)}\n                  </TableCell>\n                </TableRow>\n            ))}\n            {testPriceLabel.map(row => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\"\n                             scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? row.gp\n                        : row.pc}\n                  </TableCell>\n                </TableRow>\n            ))}\n            {testPriceRows.map(row => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\"\n                             scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? isNaN(row.gp)\n                            ? row.gp\n                            : xlsx.SSF.format('$0.00', row.gp * 30)\n                        : isNaN(row.pc)\n                            ? row.pc\n                            : xlsx.SSF.format('$0.00', row.pc * 30)}\n                  </TableCell>\n                </TableRow>\n            ))}\n          </TableBody>\n        </Typography>\n      )}\n    </Paper>\n  );\n  return (\n    <div>\n      <AppBar position=\"static\" style={{ backgroundColor: \"#ff7c01\" }}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={goBack}\n          >\n            <ArrowBack />\n            <Typography variant=\"subtitle1\">Back</Typography>\n          </IconButton>{\" \"}\n          <Typography variant=\"h5\" align=\"center\" style={{ flexGrow: 1 }}>\n            CONFIRM YOUR CHOICE\n          </Typography>\n          <Link\n            to={{ pathname: \"/ConfirmedChoice\", state: { choice: choice } }}\n            style={{ textDecoration: \"none\", color: \"white\" }}\n          >\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n              <Typography variant=\"subtitle1\">Confirm</Typography> <ArrowNext />\n            </IconButton>{\" \"}\n          </Link>\n        </Toolbar>\n      </AppBar>\n      {result}\n      <br />\n      <br />\n      <div style={{ textAlign: \"center\" }}>\n\n        \n        <Link to={{ pathname: \"/ConfirmedChoice\", state: { choice: choice } }}>\n          <Button\n            variant=\"contained\"\n            size=\"large\"\n            style={{ backgroundColor: \"#ff7c01\" }}\n          >\n            <span style={{ textDecoration: \"none\", color: \"white\" }}>\n              Confirm\n            </span>\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default ConfirmClinicChoice;\n","import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBack from \"@material-ui/icons/ArrowBackIos\";\nimport {Typography, Button} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\nimport Rating from '@material-ui/lab/Rating';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport Box from '@material-ui/core/Box';\nimport cfg from \"../etc/config.json\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(3, 3)\n    }\n}));\nconst experienceLabels = {\n    1: 'Very Unsatisfactory',\n    2: 'Unsatisfactory',\n    3: 'Neutral',\n    4: 'Satisfactory',\n    5: 'Very Satisfactory',\n};\nconst usefulnessLabels = {\n    1: 'Very Unhelpful',\n    2: 'Unhelpful',\n    3: 'Neutral',\n    4: 'Helpful',\n    5: 'Very Helpful',\n}\n\nexport const SummaryPage = props => {\n    const classes = useStyles();\n    const [userExperience, setUserExperience] = React.useState(3);\n    const [experienceHover, setExperienceHover] = React.useState(3);\n    const [usefulness, setUsefulness] = React.useState(3);\n    const [usefulnessHover, setUsefulnessHover] = React.useState(3);\n    const [feedback, setFeedback] = React.useState(\"\");\n    const [dialog, setDialog] = React.useState(true);\n\n    function goBack() {\n        props.history.goBack();\n    }\n\n    const alertClick = () => {\n        alert(\"This service will be available soon!\")\n    }\n    const handleUserExperience = (event) => {\n        const {value} = event.target;\n        setUserExperience(parseInt(value));\n    }\n    const handleUsefulness = (event) => {\n        const {value} = event.target;\n        setUsefulness(parseInt(value));\n    }\n    const handleFeedback = (event) => {\n        const {value} = event.target;\n        setFeedback(value);\n    }\n    const handleToggle = () => {\n        setDialog(!dialog);\n    }\n    const submitFeedback = () => {\n        fetch(`${cfg.backend_svc}/dbStorage/submitUserFeedback`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                userExperience: userExperience,\n                usefulness: usefulness,\n                feedback: feedback\n            })\n        })\n            .then(res => {\n                res.json();\n                handleToggle();\n            })\n            .catch(err => console.error(err));\n    }\n    const feedbackForm = (\n        <Dialog open={dialog} onClose={handleToggle}>\n            <DialogContent>\n                <span>\n                    On a scale of 1 to 5:\n                    <hr/>\n                </span>\n                <span>\n                How would you rate\n                <br/>\n                your user experience?\n                </span>\n                <br/>\n                <Rating\n                    name=\"userExperience\"\n                    value={userExperience}\n                    precision={1}\n                    emptyIcon={<StarBorderIcon fontSize=\"inherit\"/>}\n                    onChange={handleUserExperience}\n                    onChangeActive={(event,newExperienceHover) => {\n                        setExperienceHover(newExperienceHover);\n                    }}\n                />\n                <span style={{fontSize:\"small\"}}>\n                {userExperience !== null && <Box ml={2}>{experienceLabels[experienceHover !== -1 ? experienceHover : userExperience]}</Box>}\n                </span>\n                <br/>\n                <span>\n                How helpful was this\n                <br/>\n                app in finding your\n                <br/>\n                healthcare provider?\n                </span>\n                <br/>\n                <Rating\n                    name=\"usefulness\"\n                    value={usefulness}\n                    precision={1}\n                    emptyIcon={<StarBorderIcon fontSize=\"inherit\"/>}\n                    onChange={handleUsefulness}\n                    onChangeActive={(event,newUsefulnessHover) => {\n                        setUsefulnessHover(newUsefulnessHover);\n                    }}\n                />\n                <span style={{fontSize:\"small\"}}>\n                {usefulness !== null && <Box ml={2}>{usefulnessLabels[usefulnessHover !== -1 ? usefulnessHover : usefulness]}</Box>}\n                </span>\n                <hr/>\n                <FormControl variant=\"outlined\">\n                    <TextareaAutosize\n\n                        rowsMin={5}\n                        name=\"feedback\"\n                        label=\"Submit a feedback\"\n                        placeholder=\"How was your experience with the app? (Optional) \"\n                        variant=\"outlined\"\n                        value={feedback}\n                        onChange={handleFeedback}\n                    />\n                </FormControl>\n            </DialogContent>\n            <Button variant=\"contained\" color=\"primary\" onClick={submitFeedback} size=\"large\">\n                Submit\n            </Button>\n        </Dialog>\n    )\n    const {choice} = props.location.state;\n    const result = (\n        <Paper\n            sqaure=\"false\"\n            className={classes.root}\n            style={{fontWeight: \"bold\"}}\n        >\n            {choice.type === \"GP\" ? (\n                <Paper sqaure=\"false\" className={classes.root}>\n                    <img src={process.env.PUBLIC_URL + `/ClinicPictures/${choice.properties.FILE_NAME}.png`}\n                         alt=\"pcn\" style={{width: \"100%\"}}/>\n                    <br/>\n                    <br/>\n                    {choice.properties.HCI_NAME} <br/>\n                    {choice.properties.DR_NAME} <br/>\n                    {choice.properties.BLK_HSE_NO}{\" \"}\n                    {choice.properties.STREET_NAME} #{choice.properties.FLOOR_NO}-\n                    {choice.properties.UNIT_NO} {choice.properties.BUILDING_NAME}{\" \"}\n                    S{choice.properties.PostalCode}\n                    <br/> Telephone: {choice.properties.Tel} <br/>\n\n                    <hr/>\n\n                    <p>Opening Hours:</p>\n\n                    {choice.properties.ALL_OPENING_HOURS.map(period => (\n                        <p>\n                            {period.day_string}\n                            <br/>\n                            {period.opening_hours.join(\", \")}\n                        </p>\n                    ))}\n                    <hr/>\n\n                    <p>Directions:</p>\n                    {choice.properties.ALL_DIRECTIONS.map(path => (\n                        <p>\n                            {path.transport_string}\n                            <br/>\n                            {path.directions.join(\", \")}\n                        </p>\n                    ))}\n                    <hr/>\n\n\n                    {/* Opening hours:\n            {choice.properties.ALL_OPENING_HOURS.map(period => (\n              period.day_string + \":\\n\" + period.opening_hours.join(\",\\n\")\n            ))\n            .join(\", \\n\")} <br />\n          \n          Directions: { \n            choice.properties.ALL_DIRECTIONS.map(path => (\n              path.transport_string + \"\\n\" + path.directions.join(\",\\n\")\n            ))\n            .join(\", \\n\")} <br /> */}\n\n                    <hr/>\n\n                    {/*<span> Referral flowchart of your healthcare journey so far:</span>*/}\n                    {/*<img src={GpRoute} alt=\"gp route\" style={{ width: \"100%\" }} />*/}\n                </Paper>\n            ) : (\n                <div>\n                    {choice.Name}: <br/>\n                    Address: {choice.Address} S{choice.PostalCode}\n                    <br/> Telephone: {choice.Tel} <br/> Distance:{\" \"}\n                    {parseFloat(choice.distance).toFixed(2)}km away\n                    <hr/>\n\n                    <p>Opening Hours:</p>\n                    <hr/>\n                    {choice.ALL_OPENING_HOURS.map(period => (\n                        <p>\n                            {period.day_string}\n                            <br/>\n                            {period.opening_hours.join(\", \")}\n                        </p>\n                    ))}\n                    <hr/>\n                    <p>Directions:</p>\n                    {choice.ALL_DIRECTIONS.map(path => (\n                        <p>\n                            {path.transport_string}\n                            <br/>\n                            {path.directions.join(\", \")}\n                        </p>\n                    ))}\n                    <hr/>\n\n                    {/*<span>Referral flowchart of your healthcare journey so far:</span>*/}\n                    {/*<img src={PCRoute} alt=\"pc route\" style={{ width: \"100%\" }} />*/}\n                </div>\n            )}\n        </Paper>\n    );\n\n    return (\n        <body>\n        <AppBar position=\"static\" style={{backgroundColor: \"#ff7c01\"}}>\n            <Toolbar>\n                <IconButton\n                    edge=\"start\"\n                    color=\"inherit\"\n                    aria-label=\"menu\"\n                    onClick={goBack}\n                >\n                    <ArrowBack/>\n                    <Typography variant=\"subtitle1\">Back</Typography>\n                </IconButton>{\" \"}\n                <Typography variant=\"h5\" align=\"center\" style={{flexGrow: 1}}>\n                    Summary\n                </Typography>\n                <Typography variant=\"subtitle1\"><span\n                    style={{color: \"#ff7c01\"}}>----------------</span></Typography>\n            </Toolbar>\n        </AppBar>\n        <br/>\n        <br/>\n        <box width={1}> {feedbackForm} </box>\n        <Typography variant=\"button\" align=\"center\">\n            Thank you, the details of your selected clinic for your follow-up\n            treatment are as follows:\n            <br/>\n            {result}\n            <br/>\n        </Typography>\n\n        <div style={{textAlign: \"center\"}}>\n            <Button\n                variant=\"contained\"\n                size=\"large\"\n                style={{backgroundColor: \"#ff7c01\"}}\n                onClick={alertClick}\n            >\n                {\" \"}\n                <span style={{textDecoration: \"none\", color: \"white\"}}>\n            Send to my email{\" \"}\n          </span>\n            </Button>\n        </div>\n        <br/>\n        <br/>\n        <br/>\n        <hr/>\n        <Typography variant=\"caption\" align=\"center\">\n            {\" \"}\n            All information quoted above belongs to MOHT (MOH), NUHS Primary Care\n            Department, the Primary Care Network, Data.gov.sg and the Pathway team. Please direct\n            any queries to pathway@u.nus.edu.\n        </Typography>\n        </body>\n    );\n};\n\nexport default SummaryPage;\n","// utils/GoogleAnalytics.js\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactGA from 'react-ga';\nimport { Route } from 'react-router-dom';\n\nclass GoogleAnalytics extends Component {\n    componentDidMount () {\n        this.logPageChange(\n            this.props.location.pathname,\n            this.props.location.search\n        );\n    }\n\n    componentDidUpdate ({ location: prevLocation }) {\n        const { location: { pathname, search } } = this.props;\n        const isDifferentPathname = pathname !== prevLocation.pathname;\n        const isDifferentSearch = search !== prevLocation.search;\n\n        if (isDifferentPathname || isDifferentSearch) {\n            this.logPageChange(pathname, search);\n        }\n    }\n\n    logPageChange (pathname, search = '') {\n        const page = pathname + search;\n        const { location } = window;\n        ReactGA.set({\n            page,\n            location: `${location.origin}${page}`,\n            ...this.props.options\n        });\n        ReactGA.pageview(page);\n    }\n\n    render () {\n        return null;\n    }\n}\n\nGoogleAnalytics.propTypes = {\n    location: PropTypes.shape({\n        pathname: PropTypes.string,\n        search: PropTypes.string\n    }).isRequired,\n    options: PropTypes.object\n};\n\nconst RouteTracker = () => <Route component={GoogleAnalytics} />;\n\nconst init = (options = {}) => {\n    const isGAEnabled = process.env.NODE_ENV === 'production';\n    console.log(\"Google analytics\", isGAEnabled);\n    if (isGAEnabled) {\n        ReactGA.initialize(\"UA-155752920-1\");\n        ReactGA.pageview('/');\n    }\n\n    return isGAEnabled;\n};\n\nexport default {\n    GoogleAnalytics,\n    RouteTracker,\n    init\n};","import React from \"react\";\nimport Login from \"./pages/Welcome\";\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport Language from \"./pages/Language\";\nimport GeneralInfo from \"./pages/GeneralInfo\";\nimport Form from \"./pages/PatientForm\";\nimport FilteredResult from \"./pages/FilteredResult\";\nimport ConfirmClinicChoicePage from \"./pages/ConfirmClinicChoice\";\nimport confirmedChoicePage from \"./pages/SummaryPage\";\nimport GA from './util/GoogleAnalytics'\n\n\n//here is where i put all the routes tgt. can include the help button here which will\n//then be present in all the subsequent pages\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Router>\n                {GA.init() && <GA.RouteTracker/>}\n                <div>\n                    <Switch>\n                        <Route path=\"/\" exact component={Login}/>\n                        <Route path=\"/Language\" exact component={Language}/>\n                        <Route path=\"/GeneralInfo\" exact component={GeneralInfo}/>\n                        <Route path=\"/Form\" exact component={Form}/>\n                        <Route path=\"/FilteredResult\" exact component={FilteredResult}/>\n                        <Route path=\"/ConfirmClinicChoice\" exact component={ConfirmClinicChoicePage}/>\n                        <Route path=\"/confirmedChoice\" exact component={confirmedChoicePage}/>\n                    </Switch>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}