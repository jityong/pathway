{"version":3,"sources":["images/homepageLogo.png","images/BackgroundFaded.png","images/infographics.png","pages/Welcome.js","pages/Language.js","pages/GeneralInfo.js","pages/PatientForm.js","components/PcDialog.js","components/map/InfoWindowEx.js","components/map/ClinicMap.js","components/GpDialog.js","util/MyButton.js","components/comparison/CompareDialog.js","components/comparison/CompareBlock.js","components/ResultTabs.js","pages/FilteredResult.js","pages/ConfirmClinicChoice.js","pages/SummaryPage.js","util/GoogleAnalytics.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Welcome","react_default","a","createElement","style","backgroundColor","Grid","flexGrow","container","justify","direction","item","src","homepageLogo","alt","className","textAlign","verticalAlign","bottom","react_router_dom","to","Button","variant","color","size","justifyContent","Language","handleAlert","alert","minHeight","backgroundImage","concat","Background","backgroundPosition","backgroundSize","AppBar","position","Toolbar","textDecoration","IconButton","edge","aria-label","ArrowBackIos_default","Typography","align","onClick","HelpOutline_default","borderRadius","fontSize","GeneralInfo","NavigateNext_default","react","infographics","width","PatientForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","uploadInfo","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","postalCode","state","age","nationality","subsidyType","then","res","json","catch","err","console","error","handleSubmitForm","props","history","push","pathname","hasSubsidy","handleChange","bind","assertThisInitialized","goBack","event","_event$target","target","name","value","setState","defineProperty","passCheck","length","TextField","required","id","label","onChange","placeholder","InputProps","startAdornment","InputAdornment","FormControl","InputLabel","Select","input","OutlinedInput","MenuItem","component","FormLabel","RadioGroup","FormControlLabel","control","Radio","disabled","React","Component","PcDialog","_Component","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","open","handleToggle","inherits","createClass","key","_this2","onClose","clinic","fullWidth","Name","Dialog","DialogContent","fontWeight","parseFloat","distance","toFixed","Tel","ALL_OPENING_HOURS","map","period","day_string","opening_hours","join","Address","PostalCode","ALL_DIRECTIONS","path","transport_string","directions","handleListItemClick","choice","formData","handleCompare","InfoWindowEx","infoWindowRef","createRef","contentElement","document","prevProps","children","ReactDOM","render","Children","only","current","infowindow","setContent","google_maps_react_dist","assign","ref","mapStyles","height","ClinicMap","activeMarker","selectedPlace","type","showingInfoWindow","onMarkerClick","marker","_this$props","GP","PC","displayCurrent","lat","coord","lng","displayGP","properties","HCI_NAME","price","rating","doctorName","DR_NAME","formattedOpeningHours","formattedDirections","icon","geometry","coordinates","displayPC","components_PcDialog","google","zoom","initialCenter","InfoWindowEx_InfoWindowEx","onInfoWindowClose","visible","process","FILE_NAME","BLK_HSE_NO","STREET_NAME","FLOOR_NO","UNIT_NO","BUILDING_NAME","callbackFunction","GoogleApiWrapper","apiKey","GpDialog","redirectTo","react_router","MyButton","_ref","tip","btnClassName","tipClassName","Tooltip","title","placement","xlsx","require","CompareDialog","priceOpen","userNationality","userAge","userSubsidyType","handlePriceToggle","_this$state","clinicOne","clinicTwo","createData","gp","pc","rows","dangerouslySetInnerHTML","__html","consultationPriceRows","consultationPrices","consultation","data","Description","PCN_Price","PG","MG","BLUE_CHAS","NON_CHAS","NON_RESIDENT","Polyclinic_Price","SG_CHILD_ELDERLY","SG_ADULT","PR","drugPriceRows","drugPrices","drugs","ORANGE_CHAS","PG_CHAS","NON_SG","MG_above65","noPG_above65","MG_below65","below65","nonSG","testPriceRows","testPrices","tests","Non_CHAS","SG","drugPriceLabel","testPriceLabel","maxWidth","Table","TableHead","TableRow","TableCell","TableBody","row","minWidth","scope","ExpandMore_default","isNaN","SSF","format","TableFooter","useStyles","makeStyles","theme","root","palette","background","paper","CompareBlock","classes","_React$useState","useState","_React$useState2","slicedToArray","setClinicOne","_React$useState3","_React$useState4","setClinicTwo","_React$useState5","_React$useState6","setOpen","_React$useState7","_React$useState8","openTwo","setOpenTwo","handleClickOpen","handleClickOpenTwo","handleClickClose","handleClickCloseTwo","useEffect","Chip","onDelete","callbackDeleteOne","log","callbackDeleteTwo","comparison_CompareDialog","TabContainer","dir","padding","ResultTabs","useTheme","setValue","_React$useState9","_React$useState10","activeGPPage","setActiveGPPage","_React$useState11","_React$useState12","activePCPage","setActivePCPage","_React$useState13","itemPerPage","handleGPClose","handlePCClose","indexOfLastTodoGP","indexOfFirstTodoGP","filteredGP","slice","components_GpDialog","selectedGP","indexOfLastTodoPC","indexOfFirstTodoPC","filteredPC","selectedPC","comparison_CompareBlock","Tabs","newValue","indicatorColor","textColor","Tab","lib_default","axis","index","onChangeIndex","Pagination_default","hideDisabled","activePage","itemsCountPerPage","totalItemsCount","pageNumber","default","pageRangeDisplayed","currentLoc","map_ClinicMap","FilteredResult","location","userLng","userLat","sortByLoc","userNotifDialog","handleUserNotifToggle","results","_this3","userNotification","font","fontStyle","features","filter","from","turf","dist","units","clinics","sortDist","b","sortedGP","sort","sortedPC","Switch","checked","inputProps","labelPlacement","components_ResultTabs","spacing","ConfirmClinicChoice","result","Paper","sqaure","experienceLabels","1","2","3","4","5","usefulnessLabels","SummaryPage","userExperience","setUserExperience","experienceHover","setExperienceHover","usefulness","setUsefulness","usefulnessHover","setUsefulnessHover","feedback","setFeedback","dialog","setDialog","feedbackForm","Rating","precision","emptyIcon","StarBorder_default","parseInt","onChangeActive","newExperienceHover","Box","ml","newUsefulnessHover","TextareaAutosize","rowsMin","GoogleAnalytics","logPageChange","search","prevLocation","_this$props$location","isDifferentPathname","isDifferentSearch","page","undefined","window","ReactGA","set","objectSpread","origin","options","pageview","util_GoogleAnalytics","initialize","App","GA","exact","Login","Form","ConfirmClinicChoicePage","confirmedChoicePage","Boolean","hostname","match","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92d4f7f5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/homepageLogo.09d0b79e.png\";","module.exports = __webpack_public_path__ + \"static/media/BackgroundFaded.38bffda3.png\";","module.exports = __webpack_public_path__ + \"static/media/infographics.72b3f235.png\";","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport \"../style/App.css\";\nimport {Button, DialogContent} from \"@material-ui/core\";\nimport homepageLogo from \"../images/homepageLogo.png\";\nimport Grid from \"@material-ui/core/Grid\";\n\n//Login page, which is the first page user will see. Need to change background\n//color to blue (whole page & considering responsive web design) for it to look good\n\n//have to find the best orientation for the image and ensure that the button is centred when portrait\n//and bottom half when landscape\nfunction Welcome() {\n    return (\n        <body style={{\n\n                  backgroundColor: \"#ff7c01\"\n              }}>\n\n        <Grid style={{flexGrow: 1}} container justify=\"space-evenly\" direction=\"column\" >\n            <Grid item>\n                <img src={homepageLogo} alt=\"homepageLogo\" className=\"center\"/>\n            </Grid>\n\n            <Grid item style={{\n                textAlign: \"center\",\n                verticalAlign: \"bottom\",\n                bottom: \"0px\"\n            }}>\n                <Link to=\"/Language\">\n                    <Button variant=\"contained\" color=\"secondary\" size=\"large\"\n                            style={{\n                                // position: \"absolute\",\n                                // top: \"50%\",\n                                // left: \"50%\",\n                                // transform: \"translate(-50%,-50%)\"\n                                justifyContent:\"center\"\n                            }}>\n                        CONTINUE\n                    </Button>\n                </Link>\n            </Grid>\n        </Grid>\n        </body>\n    );\n}\n\nexport default Welcome;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBack from \"@material-ui/icons/ArrowBackIos\";\nimport HelpOutline from \"@material-ui/icons/HelpOutline\";\nimport { Typography, Button } from \"@material-ui/core\";\nimport Background from \"../images/BackgroundFaded.png\";\n\n//Choose langauge, but all Buttons go to same place anyway. Could use some styling\n\nfunction Language() {\n  function handleAlert() {\n    alert(\"Only English language is available currently.\");\n  }\n  return (\n    <div\n      style={{\n        minHeight: \"100vh\",\n        backgroundImage: `url(${Background})`,\n        backgroundPosition: \"center\",\n        backgroundSize: \"cover\"\n      }}\n    >\n      <AppBar position=\"static\" style={{ backgroundColor: \"#ff7c01\" }}>\n        <Toolbar>\n          <Link to=\"/\" style={{ textDecoration: \"none\", color: \"white\" }}>\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n              <ArrowBack />\n              <Typography variant=\"subtitle1\">Back</Typography>\n            </IconButton>{\" \"}\n          </Link>\n          <Typography variant=\"h5\" align=\"center\" style={{ flexGrow: 1 }}>\n            LANGUAGE\n          </Typography>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={handleAlert}\n          >\n            <Typography variant=\"subtitle1\" /> <HelpOutline />\n          </IconButton>{\" \"}\n        </Toolbar>\n      </AppBar>\n      <br />\n      <br />\n      <div style={{ textAlign: \"center\" }}>\n        <Button\n          variant=\"contained\"\n          style={{ backgroundColor: \"#FF6565\", borderRadius: \"15px\" }}\n        >\n          <Link to=\"/GeneralInfo\">\n            <span style={{ fontSize: \"7vw\", color: \"black\" }}>English</span>\n          </Link>\n        </Button>{\" \"}\n      </div>\n      <br />\n      <div style={{ textAlign: \"center\" }}>\n        <Button\n          variant=\"contained\"\n          color=\"default\"\n          style={{ borderRadius: \"15px\" }}\n          onClick={handleAlert}\n        >\n          <Link to=\"/GeneralInfo\">\n            <span style={{ fontSize: \"7vw\", color: \"black\" }}>中文</span>\n          </Link>\n        </Button>{\" \"}\n      </div>\n      <br />\n      <div style={{ textAlign: \"center\" }}>\n        <Button\n          variant=\"contained\"\n          color=\"default\"\n          style={{ borderRadius: \"15px\" }}\n          onClick={handleAlert}\n        >\n          <Link to=\"/GeneralInfo\">\n            <span style={{ fontSize: \"7vw\", color: \"black\" }}>\n              Bahasa Melayu\n            </span>\n          </Link>\n        </Button>{\" \"}\n      </div>\n      <br />\n      <div style={{ textAlign: \"center\" }}>\n        <Button\n          variant=\"contained\"\n          color=\"default\"\n          style={{ borderRadius: \"15px\" }}\n          onClick={handleAlert}\n        >\n          <Link to=\"/GeneralInfo\">\n            <span style={{ fontSize: \"7vw\", color: \"black\" }}>Tamil</span>\n          </Link>\n        </Button>{\" \"}\n      </div>\n    </div>\n  );\n}\n\nexport default Language;\n","import React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport infographics from \"../images/infographics.png\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBack from \"@material-ui/icons/ArrowBackIos\";\nimport ArrowNext from \"@material-ui/icons/NavigateNext\";\n//haven't included any info here, can do styling for RWD(responsive web design)\nfunction GeneralInfo() {\n\n  return (\n    <div >\n      <AppBar position=\"static\" style={{ backgroundColor: \"#ff7c01\" }}>\n        <Toolbar>\n        <Link to=\"/Language\" style={{ textDecoration: \"none\", color: \"white\" }}>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <ArrowBack />\n            <Typography variant=\"subtitle1\">Back</Typography>\n          </IconButton>{\" \"}\n          </Link>\n          <Typography variant=\"h5\" align=\"center\" style={{ flexGrow: 1 }}>\n            GENERAL INFORMATION\n          </Typography>\n          <Link to=\"/Form\" style={{ textDecoration: \"none\", color: \"white\" }}>\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n              <Typography variant=\"subtitle1\">Next</Typography> <ArrowNext />\n            </IconButton>{\" \"}\n          </Link>\n        </Toolbar>\n      </AppBar>\n      <Fragment>\n        <img src={infographics} alt=\"infographics\" style={{ width: \"100%\" }} />\n      </Fragment>\n      <Link to=\"/Form\">\n        <div style={{ textAlign: \"center\" }}>\n          <Button\n            variant=\"contained\"\n            size=\"large\"\n            style={{ backgroundColor: \"#ff7c01\" }}\n          >\n            <span style={{ textDecoration: \"none\", color: \"white\" }}>\n              Ok, Next\n            </span>\n          </Button>\n        </div>\n      </Link>{\" \"}\n    </div>\n  );\n}\nexport default GeneralInfo;\n","import React, {Fragment} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBack from \"@material-ui/icons/ArrowBackIos\";\nimport HelpOutline from \"@material-ui/icons/HelpOutline\";\n\n//this component takes gets postal code & subsidy from user and pass the data over\n//to the FilteredResult.js component through the react router\n// could also use some styling\n\nclass PatientForm extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            postalCode: \"\",\n            hasSubsidy: \"No\",\n            subsidyType: \"\",\n            age: \"\",\n            nationality: \"\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.goBack = this.goBack.bind(this);\n    }\n\n    uploadInfo = () => {\n        // console.log(\"running uploadinfo\");\n        fetch('http://156.67.217.219:5000/dbStorage/storeFormInfo', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                postalCode: this.state.postalCode,\n                age: this.state.age,\n                nationality: this.state.nationality,\n                subsidyType: this.state.subsidyType,\n            })\n        })\n            .then(res => res.json())\n            .catch(err => console.error(err));\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target;\n        return this.setState({[name]: value});\n    }\n\n    goBack() {\n        this.props.history.goBack();\n    }\n\n    handleSubmitForm = () => {\n        this.uploadInfo();\n        this.props.history.push({\n            pathname: '/FilteredResult',\n            state: {\n                postalCode: this.state.postalCode,\n                age: this.state.age,\n                nationality: this.state.nationality,\n                subsidyType: this.state.subsidyType\n            }\n        });\n    }\n\n    render() {\n        const passCheck =\n            this.state.postalCode.length === 6 &&\n            this.state.age !== \"\" &&\n            this.state.nationality !== \"\";\n        const help = () => {\n            alert(\n                \"Postal code information is used to help locate and identify clinics near your desired address.\"\n                + \"\\n\\n\" +\n                \"Your age, nationality and eligible subsidy types are used in filtering out relevant prices for your reference!\"\n                + \"\\n\\n\\n\\n\" +\n                \"Please complete the following form to submit and continue your journey on Pathway!\"\n                + \"\\n\\n\" +\n                \"Some of these information are stored to analyse the demographics of our users and are not used for any other purposes.\"\n                + \"\\n\\n\" +\n                \" We are not able to identify any users with these information.\"\n            );\n        };\n        const alertSubsidy = () => {\n            alert(\n                \"For more information regarding subsidies, please refer to http://tiny.cc/moh-subsidies\"\n            );\n        };\n        return (\n            <div>\n                <AppBar position=\"static\" style={{backgroundColor: \"#ff7c01\"}}>\n                    <Toolbar>\n                        <Link\n                            to=\"/GeneralInfo\"\n                            style={{textDecoration: \"none\", color: \"white\"}}\n                        >\n                            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                                <ArrowBack/>\n                                <Typography variant=\"subtitle1\">Back</Typography>\n                            </IconButton>{\" \"}\n                        </Link>\n                        <Typography variant=\"h5\" align=\"center\" style={{flexGrow: 1}}>\n                            DETAILS\n                        </Typography>\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            onClick={help}\n                        >\n                            <Typography variant=\"subtitle1\">Help{\" \"}</Typography> <HelpOutline/>\n                        </IconButton>{\" \"}\n                    </Toolbar>\n                </AppBar>\n                <br/>\n                <br/>\n                <TextField\n                    required={true}\n                    name=\"postalCode\"\n                    id=\"postalCode\"\n                    variant=\"outlined\"\n                    label=\"Please enter your Postal Code\"\n                    value={this.state.postalCode}\n                    onChange={this.handleChange}\n                    placeholder=\"123456\"\n                    InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">S</InputAdornment>\n                    }}\n                    style={{width: \"100%\"}}\n                />\n                <br/>\n                <hr/>\n                <TextField\n                    required={true}\n                    id=\"age\"\n                    name=\"age\"\n                    variant=\"outlined\"\n                    label=\"Please enter your age\"\n                    value={this.state.age}\n                    onChange={this.handleChange}\n                    placeholder=\"ie. 25\"\n                    // error ={this.state.age=\"\" ? true : false}\n                    // InputProps={{\n                    //   startAdornment: <InputAdornment position=\"start\" children={}/>\n                    // }}\n                    style={{width: \"100%\"}}\n                />\n                <br/>\n                <hr/>\n                <FormControl variant=\"outlined\" style={{width: \"100%\"}}>\n                    <InputLabel>Nationality</InputLabel>\n                    <Select\n                        required\n                        name=\"nationality\"\n                        value={this.state.nationality}\n                        onChange={this.handleChange}\n                        input={\n                            <OutlinedInput\n                                label=\"Nationality\"\n                                name=\"nationality\"\n                                id=\"nationality\"\n                            />\n                        }\n                    >\n                        <MenuItem value=\"\">\n                            <em>None</em>\n                        </MenuItem>\n                        <MenuItem value=\"Singaporean\">Singaporean</MenuItem>\n                        <MenuItem value=\"Permanent Resident\">Permanent Resident</MenuItem>\n                        <MenuItem value=\"Non-Resident\">Non-Resident</MenuItem>\n                    </Select>\n                </FormControl>\n                <br/>\n                <hr/>\n                {this.state.nationality === \"Singaporean\" &&\n                <FormControl component=\"fieldset\">\n                    <FormLabel component=\"legend\">\n                        Are you eligible for any subsidies?\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            onClick={alertSubsidy}>\n                            <Typography variant=\"subtitle1\"></Typography> <HelpOutline/>\n                        </IconButton>\n                    </FormLabel>\n                    <RadioGroup\n                        aria-label=\"Subsidies eligibility\"\n                        name=\"hasSubsidy\"\n                        value={this.state.hasSubsidy}\n                        // checked={this.state.hasSubsidy === \"Yes\"}\n                        onChange={this.handleChange}\n                    >\n                        <FormControlLabel value=\"Yes\" control={<Radio/>} label=\"Yes\"/>\n                        <FormControlLabel value=\"No\" control={<Radio/>} label=\"No\"/>\n                    </RadioGroup>\n                </FormControl>\n                }\n                {this.state.hasSubsidy === \"Yes\" && this.state.nationality === \"Singaporean\" && (\n                    <div>\n                        <FormControl variant=\"outlined\" style={{width: \"100%\"}}>\n                            <InputLabel>\n                                Please select the subsidy you are eligible for:\n                            </InputLabel>\n                            <Select\n                                name=\"subsidyType\"\n                                value={this.state.subsidyType}\n                                onChange={this.handleChange}\n                                input={\n                                    <OutlinedInput\n                                        label=\"Eligible Subsidies\"\n                                        name=\"age\"\n                                        id=\"outlined-age-simple\"\n                                    />\n                                }\n                            >\n                                <MenuItem value=\"\">\n                                    <em>None</em>\n                                </MenuItem>\n                                <MenuItem value=\"\">--Please select an option--</MenuItem>\n                                <MenuItem value=\"CHAS Orange\">CHAS Orange</MenuItem>\n                                <MenuItem value=\"CHAS Blue\">CHAS Blue</MenuItem>\n                                <MenuItem value=\"CHAS Green\">CHAS Green</MenuItem>\n                                {this.state.age >= 60 &&\n                                <MenuItem value=\"MG\">Merdeka Generation</MenuItem>}\n                                {this.state.age >= 65 &&\n                                <MenuItem value=\"PG\">Pioneer Generation</MenuItem>}\n                            </Select>\n                        </FormControl>\n                    </div>\n                )}\n                <br/>\n                <hr/>\n                <div style={{justifyContent: \"center\", textAlign: \"center\"}}>\n                    {passCheck ? (\n                        <Button\n                            variant=\"contained\"\n                            style={{backgroundColor: \"#ff7c01\"}}\n                            size=\"large\"\n                            onClick={this.handleSubmitForm}\n                        >\n                                <span style={{color: \"white\"}}>Submit</span>\n                        </Button>\n                    ) : (\n                        <Fragment>\n                            <Button variant=\"contained\" disabled={true} size=\"large\">\n                                Submit\n                            </Button>\n                            <br/>\n                            <span style={{fontSize: \"15px\"}}>\n                Please complete the form above to submit.\n              </span>\n                        </Fragment>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PatientForm;\n","import React, {Component} from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport {Link} from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\n\nimport {\n    DialogContent\n} from \"@material-ui/core\";\n\n// Displays the PC dialog when clicked in the list of PCs within resultTab.\n// FilteredResult --> ResultTabs --> PcDialog\n\nexport class PcDialog extends Component {\n    state = {\n        open: false\n    };\n    handleToggle = () => {\n        this.setState({\n            open: !this.state.open\n        });\n    };\n\n    render() {\n        const {onClose} = this.props;\n        const {open} = this.state;\n        const {clinic} = this.props;\n        const handleToggle = () => {\n            this.setState({\n                open: !this.state.open\n            });\n        };\n\n        function handleListItemClick(clinic, name) {\n            onClose(clinic, name);\n            handleToggle();\n        }\n\n        return (\n            <div>\n                <Button variant=\"outlined\" fullWidth={true} onClick={this.handleToggle}>\n                    {clinic.Name}\n                </Button>\n                <Dialog open={open} onClose={handleToggle}>\n                    <DialogContent>\n                        {/* No image to be rendered yet */}\n                        <span style={{fontWeight: \"bold\"}}>{clinic.Name} <br/> {/*Clinic Name*/}</span>\n                        {parseFloat(clinic.distance).toFixed(2)}km away {/*Distance*/}\n                        <hr/>\n\n                        Telephone: {clinic.Tel}\n                        <hr/>\n\n                        <span style={{fontWeight: \"bold\"}}>Opening Hours:</span>\n                        <br/>\n                        {clinic.ALL_OPENING_HOURS.map(period => (\n                            <p key={clinic.id}>\n                                {period.day_string}\n                                <br/>\n                                {period.opening_hours.join(\", \")}\n                            </p>\n                        ))}\n\n                        <hr/>\n                        <span style={{fontWeight: \"bold\"}}>Address: </span>\n                        <br/>\n                        {clinic.Address}{\" \"}\n                        Singapore {clinic.PostalCode}\n                        <hr/>\n\n                        <span style={{fontWeight: \"bold\"}}>Directions:</span>\n                        <br/>\n                        {clinic.ALL_DIRECTIONS.map(path => (\n                            <p key={clinic.id}>\n                                {path.transport_string}\n                                <br/>\n                                {path.directions.join(\", \")}\n                            </p>\n                        ))}\n                        <hr/>\n\n                        <Grid style={{flexGrow: 1}} container direction=\"column\" justify=\"space-evenly\">\n                            <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                onClick={() => handleListItemClick(clinic, clinic.Name)}\n                            >\n                                {\" \"}\n                                Add to comparison{\" \"}\n                            </Button>\n\n                            <br/>\n\n\n                            <Link\n                                to={{\n                                    pathname: \"/ConfirmClinicChoice\",\n                                    state: {\n                                        choice: clinic,\n                                        formData: this.props.formData\n                                    }\n                                }}\n                            >\n                                <Button\n                                    variant=\"contained\"\n                                    style={{backgroundColor: \"#ff7c01\"}}\n                                    onClick={this.handleCompare}\n                                >\n                                    <span style={{color: \"white\"}}>Select</span>\n                                </Button>\n                            </Link>\n                        </Grid>\n                    </DialogContent>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default PcDialog;\n","import React, { Component } from \"react\";\nimport { InfoWindow} from \"google-maps-react\";\nimport ReactDOM from \"react-dom\";\n\nexport default class InfoWindowEx extends Component {\n  constructor(props) {\n    super(props);\n    this.infoWindowRef = React.createRef();\n    this.contentElement = document.createElement(`div`);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.children !== prevProps.children) {\n      ReactDOM.render(\n        React.Children.only(this.props.children),\n        this.contentElement\n      );\n      this.infoWindowRef.current.infowindow.setContent(this.contentElement);\n    }\n  }\n\n  render() {\n    return <InfoWindow ref={this.infoWindowRef} {...this.props} />;\n  }\n}\n","import React, { Component} from \"react\";\nimport {Map, GoogleApiWrapper, Marker} from \"google-maps-react\";\nimport PcDialog from \"../PcDialog\";\nimport Button from \"@material-ui/core/Button\";\nimport InfoWindowEx from \"./InfoWindowEx\";\n\nconst mapStyles = {\n    width: \"100%\",\n    height: \"100%\"\n};\n\nexport class ClinicMap extends Component {\n    state = {\n        activeMarker: {},\n        selectedPlace: {\n            clinic: {\n                type: \"\"\n            }\n        },\n        showingInfoWindow: false\n    };\n\n    onMarkerClick = (props, marker) =>\n        this.setState({\n            activeMarker: marker,\n            selectedPlace: props,\n            showingInfoWindow: true\n        });\n\n    render() {\n        const {GP, PC} = this.props;\n        const {selectedPlace} = this.state;\n\n        const displayCurrent = (\n            <Marker\n                clinic={{type: \"currentloc\"}}\n                position={{\n                    lat: this.props.coord[1],\n                    lng: this.props.coord[0]\n                }}\n            />\n        );\n\n        const displayGP = GP.map(clinic => {\n            clinic.type = \"GP\";\n            clinic.name = clinic.properties.HCI_NAME;\n            clinic.price = \"$$\";\n            clinic.rating = \"4.3\";\n            clinic.doctorName = clinic.properties.DR_NAME;\n\n            clinic.formattedOpeningHours = clinic.properties.ALL_OPENING_HOURS.map(\n                period =>\n                    period.day_string + \":</br>\" + period.opening_hours.join(\",</br>\")\n            ).join(\"</br></br>\");\n\n\n            clinic.formattedDirections = clinic.properties.ALL_DIRECTIONS.map(\n                path => path.transport_string + \"</br>\" + path.directions.join(\",</br>\")\n            ).join(\"</br></br>\");\n\n\n            return (\n                <Marker\n                    key={clinic.id}\n                    clinic={clinic}\n                    id={clinic.id}\n                    icon={\"http://maps.google.com/mapfiles/ms/icons/green.png\"}\n                    position={{\n                        lat: clinic.geometry.coordinates[1],\n                        lng: clinic.geometry.coordinates[0]\n                    }}\n                    onClick={this.onMarkerClick}\n                />\n            );\n        });\n\n        const displayPC = PC.map(clinic => {\n            clinic.type = \"Polyclinic\";\n            clinic.name = clinic.Name;\n            clinic.price = \"$\";\n            clinic.rating = \"4.0\";\n            clinic.formattedOpeningHours = clinic.ALL_OPENING_HOURS.map(\n                period =>\n                    period.day_string + \":</br>\" + period.opening_hours.join(\",</br>\")\n            ).join(\"</br></br>\");\n\n\n            clinic.formattedDirections = clinic.ALL_DIRECTIONS.map(\n                path => path.transport_string + \"</br>\" + path.directions.join(\",</br>\")\n            ).join(\"</br></br>\");\n\n            return (\n                <Marker\n                    key={clinic.id}\n                    clinic={clinic}\n                    id={clinic.id}\n                    icon={\"http://maps.google.com/mapfiles/ms/icons/blue.png\"}\n                    position={{\n                        lat: clinic.coord[1],\n                        lng: clinic.coord[0]\n                    }}\n                    onClick={this.onMarkerClick}\n                >\n                    <PcDialog clinic={clinic}/>\n                </Marker>\n            );\n        });\n        return (\n            <Map\n                google={this.props.google}\n                zoom={15}\n                style={mapStyles}\n                initialCenter={{lat: this.props.coord[1], lng: this.props.coord[0]}}\n            >\n                {displayGP}\n                {displayPC}\n                {displayCurrent}\n                <InfoWindowEx\n                    marker={this.state.activeMarker}\n                    onClose={this.onInfoWindowClose}\n                    visible={this.state.showingInfoWindow}\n                    selectedPlace={selectedPlace}\n                >\n                    {selectedPlace.clinic.type === \"GP\" ? (\n                        <div>\n                            <img\n                                src={\n                                    process.env.PUBLIC_URL +\n                                    `/ClinicPictures/${selectedPlace.clinic.properties.FILE_NAME}.png`\n                                }\n                                alt=\"clinic\"\n                                style={{width: \"100%\"}}\n                            />\n                            <hr/>\n                            <span style={{fontWeight: \"bold\"}}> (GP) {selectedPlace.clinic.properties.HCI_NAME} </span>\n                            <br/>\n                            {parseFloat(selectedPlace.clinic.distance).toFixed(2)}km away\n\n                            <hr/>\n                            <span style={{fontWeight: \"bold\"}}>{selectedPlace.clinic.properties.DR_NAME} </span>\n                            <br/>\n                            <br/>\n                            <span style={{fontWeight: \"bold\"}}>Telephone: </span>\n                            <br/>\n                            {selectedPlace.clinic.properties.Tel}\n\n                            <hr/>\n                            <span style={{fontWeight: \"bold\"}}> Address: </span>\n                            <br/>\n                            {selectedPlace.clinic.properties.BLK_HSE_NO}{\" \"}\n                            {selectedPlace.clinic.properties.STREET_NAME} #\n                            {selectedPlace.clinic.properties.FLOOR_NO}-\n                            {selectedPlace.clinic.properties.UNIT_NO}{\" \"}\n                            {selectedPlace.clinic.properties.BUILDING_NAME} Singapore{\" \"}\n                            {selectedPlace.clinic.properties.PostalCode}\n\n                            <hr/>\n                            {/* <hr />\n              Opening Hours:\n              {selectedPlace.clinic.properties.ALL_OPENING_HOURS.map(period => (\n                  period.day_string + \":\\n\" + period.opening_hours.join(\",\\n\")\n              ))\n              .join(\", \\n\")}\n              <hr />\n              Directions:\n              {selectedPlace.clinic.properties.ALL_DIRECTIONS.map(path => (\n              path.transport_string + \"\\n\" + path.directions.join(\",\\n\")\n              ))\n              .join(\", \\n\")}\n              <hr /> */}\n                            <span style={{fontWeight: \"bold\"}}>Opening Hours:</span>\n                            <br/>\n                            {selectedPlace.clinic.properties.ALL_OPENING_HOURS.map(period => (\n                                <p>\n                                    {period.day_string}\n                                    <br/>\n                                    {period.opening_hours.join(\", \")}\n                                </p>\n                            ))}\n                            <hr/>\n                            <span style={{fontWeight: \"bold\"}}>Directions:</span>\n                            {selectedPlace.clinic.properties.ALL_DIRECTIONS.map(path => (\n                                <p>\n                                    {path.transport_string}\n                                    <br/>\n                                    {path.directions.join(\", \")}\n                                </p>\n                            ))}\n                            <hr/>\n                            {/* <Button>\n                <Link\n                  to={{\n                    pathname: \"/ConfirmClinicChoice\",\n                    state: {\n                      choice: selectedPlace.clinic\n                    }\n                  }}\n                >\n                  <span>Select</span>\n                </Link>\n              </Button> */}\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() =>\n                                    this.props.callbackFunction(selectedPlace.clinic)\n                                }\n                            >\n                                <span style={{color: \"white\"}}>Add to comparison</span>\n                            </Button>\n                        </div>\n                    ) : selectedPlace.clinic.type === \"Polyclinic\" ? (\n                        <div>\n                            <span style={{fontWeight: \"bold\"}}> (Polyclinic) {selectedPlace.clinic.Name} </span>\n                            <br/>\n                            {parseFloat(selectedPlace.clinic.distance).toFixed(2)}km away\n                            <hr/>\n                            <span style={{fontWeight: \"bold\"}}>Telephone: </span>\n                            <br/>\n                            {selectedPlace.clinic.Tel}\n                            <hr/>\n                            <span style={{fontWeight: \"bold\"}}>Address:</span>\n                            <br/>\n                            {selectedPlace.clinic.Address} Singapore{\" \"}\n                            {selectedPlace.clinic.PostalCode}\n                            <hr/>\n                            <span style={{fontWeight: \"bold\"}}>Opening Hours:</span>\n                            <br/>\n                            {selectedPlace.clinic.ALL_OPENING_HOURS.map(period => (\n                                <p>\n                                    {period.day_string}\n                                    <br/>\n                                    {period.opening_hours.join(\", \")}\n                                </p>\n                            ))}\n                            <hr/>\n                            <span style={{fontWeight: \"bold\"}}>Directions:</span>\n                            {selectedPlace.clinic.ALL_DIRECTIONS.map(path => (\n                                <p>\n                                    {path.transport_string}\n                                    <br/>\n                                    {path.directions.join(\", \")}\n                                </p>\n                            ))}\n                            <hr/>\n\n                            {/* <Button>\n                <Link\n                  to={{\n                      pathname: \"/ConfirmClinicChoice\",\n                    state: {\n                      choice: selectedPlace.clinic\n                    }\n                  }}\n                >\n                  <span>Select</span>\n                </Link>\n              </Button> */}\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() =>\n                                    this.props.callbackFunction(selectedPlace.clinic)\n                                }\n                            >\n                                <span style={{color: \"white\"}}>Add to comparison</span>\n                            </Button>\n                        </div>\n                    ) : (\n                        <div>Input Location</div>\n                    )}\n                </InfoWindowEx>\n            </Map>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: 'AIzaSyD4AiZGu6Nl4kS463SYdJlyZQMrFLMokcs'\n})(ClinicMap);\n","import React, {Component} from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport {Link, Redirect} from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\n\nimport {\n    DialogContent,\n} from \"@material-ui/core\";\n\n//Displays the GP dialog when clicked in the list of GPs within resultTab.\n// // FilteredResult --> ResultTabs --> GpDialog\nexport class GpDialog extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            redirectTo: null\n        };\n    }\n\n    handleToggle = () => {\n        this.setState({\n            open: !this.state.open\n        });\n    };\n\n\n    render() {\n\n        const {onClose} = this.props;\n        const {open} = this.state;\n        const {clinic} = this.props;\n        const handleToggle = () => {\n            this.setState({\n                open: !this.state.open\n            });\n        };\n\n        function handleListItemClick(clinic, name) {\n            onClose(clinic, name);\n            handleToggle();\n        }\n\n\n        if (this.state.redirectTo) {\n            return (\n                <Redirect to={this.state.redirectTo}/>\n            );\n        }\n\n        return (\n            <div>\n                <Button variant=\"outlined\" fullWidth={true} onClick={this.handleToggle}>\n                    {clinic.properties.HCI_NAME}\n                </Button>\n                <Dialog open={open} onClose={handleToggle}>\n                    <DialogContent>\n                        <img\n                            src={\n                                process.env.PUBLIC_URL +\n                                `/ClinicPictures/${clinic.properties.FILE_NAME}.png`\n                            }\n                            alt=\"clinic\"\n                            style={{width: \"100%\"}}\n                        />\n                        <hr/>\n                        <span style={{fontWeight: \"bold\"}}>{clinic.properties.HCI_NAME} </span> {/*Clinic Name*/}\n                        <br/>\n                        {parseFloat(clinic.distance).toFixed(2)}km away {/*Distance*/}\n                        <hr/>\n                        <span style={{fontWeight: \"bold\"}}>{clinic.properties.DR_NAME} {/*Doctor Name*/} </span>\n                        <br/>\n                        <br/>\n                        <span style={{fontWeight: \"bold\"}}>Telephone: </span>\n                        <br/>\n                        {clinic.properties.Tel} <br/>\n                        <hr/>\n                        <p style={{fontWeight: \"bold\"}}>Opening Hours:</p>\n                        <br/>\n                        {clinic.properties.ALL_OPENING_HOURS.map(period => (\n                            <p key={clinic.properties.HCI_NAME}>\n                                {period.day_string}\n                                <br/>\n                                {period.opening_hours.join(\", \")}\n                            </p>\n                        ))}\n                        <hr/>\n                        <p style={{fontWeight: \"bold\"}}>Address: </p><br/>\n                        {clinic.properties.BLK_HSE_NO} {clinic.properties.STREET_NAME} #\n                        {clinic.properties.FLOOR_NO}-{clinic.properties.UNIT_NO}{\" \"}\n                        {clinic.properties.BUILDING_NAME} Singapore{\" \"}\n                        {clinic.properties.PostalCode}\n                        <hr/>\n                        <p style={{fontWeight: \"bold\"}}>Directions:</p>\n                        {clinic.properties.ALL_DIRECTIONS.map(path => (\n                            <p key={clinic.properties.HCI_NAME}>\n                                {path.transport_string}\n                                <br/>\n                                {path.directions.join(\", \")}\n                            </p>\n                        ))}\n                        <hr/>\n                        <Grid style={{flexGrow: 1}} container justify=\"space-evenly\" direction=\"column\">\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() =>\n                                    handleListItemClick(clinic, clinic.properties.HCI_NAME)\n                                }\n                            >\n                                <span style={{color: \"white\"}}>Add to comparison</span>\n                            </Button>\n                            <br/>\n\n                            <Link style={{justifyContent:\"center\"}}\n                                to={{\n                                    pathname: \"/ConfirmClinicChoice\",\n                                    state: {\n                                        choice: clinic,\n                                        formData: this.props.formData\n                                    }\n                                }}\n                            >\n                                <Button\n                                    variant=\"contained\"\n                                    style={{backgroundColor: \"#ff7c01\"}}\n                                    onClick={this.handleCompare}\n                                >\n                                    <span style={{color: \"white\"}}>Select</span>\n                                </Button>\n                            </Link>\n                        </Grid>\n                    </DialogContent>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default GpDialog;","import React from 'react';\n\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport default ({ children, onClick, tip, btnClassName, tipClassName }) => (\n  <Tooltip title={tip} className={tipClassName} placement=\"top\">\n    <IconButton onClick={onClick} className={btnClassName}>\n      {children}\n    </IconButton>\n  </Tooltip>\n);","import React, {Component, Fragment} from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport {Link} from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport consultationPrices from \"../../data/consultationPrices\";\nimport drugPrices from \"../../data/drugPrices\";\nimport testPrices from \"../../data/testPrices\";\nimport MyButton from \"../../util/MyButton\";\n\nimport {\n    DialogContent,\n    Typography\n} from \"@material-ui/core\";\n\nvar xlsx = require(\"xlsx\");\n\n//Displays the \"Compare!\" button when 2 clinics are selected for comparison.\n// Displays the table of information for comparison between the 2 clinics.\nexport class CompareDialog extends Component {\n    state = {\n        open: false,\n        priceOpen: false,\n        userNationality: this.props.formData.nationality,\n        userAge: this.props.formData.age,\n        userSubsidyType: this.props.formData.subsidyType\n    };\n    handleToggle = () => {\n        this.setState({\n            open: !this.state.open\n        });\n    };\n    handlePriceToggle = () => {\n        this.setState({\n            priceOpen: !this.state.priceOpen\n        });\n    };\n\n    render() {\n        const {\n            open,\n            priceOpen,\n            userNationality,\n            userAge,\n            userSubsidyType\n        } = this.state;\n        const {clinicOne, clinicTwo} = this.props;\n\n        function createData(name, gp, pc) {\n            return {name, gp, pc};\n        }\n\n        const rows = [\n            createData(\n                <span style={{fontWeight: \"bold\"}}>Name</span>,\n                <span style={{fontWeight: \"bold\"}}>{clinicOne.name}</span>,\n                <span style={{fontWeight: \"bold\"}}> {clinicTwo.name}</span>\n            ),\n            createData(\n                \"Distance (km)\",\n                parseFloat(clinicOne.distance).toFixed(2),\n                parseFloat(clinicTwo.distance).toFixed(2)\n            ),\n            // createData(\"Price\", clinicOne.price, clinicTwo.price),\n            createData(\"Price\", \"$\", \"$\"),\n            // createData(\"Ratings\", clinicOne.rating, clinicTwo.rating),\n\n            createData(\n                \"Opening hours\",\n                <div\n                    dangerouslySetInnerHTML={{\n                        __html: clinicOne.formattedOpeningHours\n                    }}\n                />,\n                <div\n                    dangerouslySetInnerHTML={{\n                        __html: clinicTwo.formattedOpeningHours\n                    }}\n                />\n            ),\n            createData(\n                \"Directions\",\n                <div\n                    dangerouslySetInnerHTML={{\n                        __html: clinicOne.formattedDirections\n                    }}\n                />,\n                <div\n                    dangerouslySetInnerHTML={{\n                        __html: clinicTwo.formattedDirections\n                    }}\n                />\n            )\n\n\n        ];\n        const consultationPriceRows = consultationPrices.consultation.map(function (data) {\n            return createData(\n                data.Description,\n                userNationality === \"Singaporean\"\n                    ? userSubsidyType === \"PG\"\n                    ? data.PCN_Price.PG\n                    : userSubsidyType === \"MG\"\n                        ? data.PCN_Price.MG\n                        : userSubsidyType === \"CHAS Blue\" || userSubsidyType === \"CHAS Orange\"\n                            ? data.PCN_Price.BLUE_CHAS\n                            : data.PCN_Price.NON_CHAS\n                    : data.PCN_Price.NON_RESIDENT,\n                userNationality === \"Singaporean\"\n                    ? userSubsidyType === \"PG\"\n                    ? data.Polyclinic_Price.PG\n                    : userSubsidyType === \"MG\"\n                        ? data.Polyclinic_Price.MG\n                        : userAge < 18 || userAge >= 65\n                            ? data.Polyclinic_Price.SG_CHILD_ELDERLY\n                            : data.Polyclinic_Price.SG_ADULT\n                    : userNationality === \"Permanent Resident\"\n                    ? data.Polyclinic_Price.PR\n                    : data.Polyclinic_Price.NON_RESIDENT\n            )\n        })\n        const drugPriceRows = drugPrices.drugs.map(function (data) {\n            return createData(\n                data.Name + \": \" + data.Description,\n                userNationality === \"Singaporean\"\n                    ? userSubsidyType === \"CHAS Orange\" || userSubsidyType === \"CHAS Blue\"\n                    ? data.PCN_Price.ORANGE_CHAS\n                    : userSubsidyType === \"PG\"\n                        ? data.PCN_Price.PG_CHAS\n                        : data.PCN_Price.NON_CHAS\n                    : data.PCN_Price.NON_SG,\n                userNationality === \"Singaporean\"\n                    ? userAge >= 65\n                    ? userSubsidyType === \"PG\"\n                        ? data.Polyclinic_Price.PG\n                        : userSubsidyType === \"MG\"\n                            ? data.Polyclinic_Price.MG_above65\n                            : data.Polyclinic_Price.noPG_above65\n                    : userSubsidyType === \"MG\"\n                        ? data.Polyclinic_Price.MG_below65\n                        : data.Polyclinic_Price.below65\n                    : data.Polyclinic_Price.nonSG\n            )\n        });\n        const testPriceRows = testPrices.tests.map(function (data) {\n                return createData(\n                    data.Name + \": \" + data.Description,\n                    userNationality === \"Singaporean\"\n                        ? userSubsidyType === \"PG\"\n                        ? data.PCN_Price.PG\n                        : userSubsidyType === \"MG\"\n                            ? data.PCN_Price.MG\n                            : userSubsidyType === \"CHAS Orange\" || userSubsidyType === \"CHAS Blue\"\n                                ? data.PCN_Price.ORANGE_CHAS\n                                : data.PCN_Price.Non_CHAS\n                        : userNationality === \"Permanent Resident\"\n                        ? data.PCN_Price.PR\n                        : data.PCN_Price.NON_RESIDENT,\n                    userNationality === \"Singaporean\"\n                        ? userAge < 18 || userAge >= 65\n                        ? data.Polyclinic_Price.SG_CHILD_ELDERLY\n                        : data.Polyclinic_Price.SG\n                        : userNationality === \"Permanent Resident\"\n                        ? data.Polyclinic_Price.PR\n                        : data.Polyclinic_Price.NON_RESIDENT\n                )\n            }\n        )\n        const drugPriceLabel = [\n            createData(\n                <span style={{fontWeight: \"bold\"}}>Drug prices/month</span>,\n                <span style={{fontWeight: \"bold\"}}>Estimated drug prices per month, ie 30 x tablet</span>,\n                <span style={{fontWeight: \"bold\"}}>Estimated drug prices per month, ie 30 x tablet</span>\n            )];\n\n        const testPriceLabel = [\n            createData(\n                <span style={{fontWeight: \"bold\"}}>Prices for Tests & Screenings</span>,\n                <span style={{fontWeight: \"bold\"}}>Prices for Tests & Screenings</span>,\n                <span style={{fontWeight: \"bold\"}}>Prices for Tests & Screenings</span>\n            )];\n        // const priceRows = consultationPriceRows.concat(drugPriceLabel).concat(drugPriceRows).concat(testPriceLabel).concat(testPriceRows).flatMap(function (data) {\n        //     return data;\n        // });\n        const handleToggle = () => {\n            this.setState({\n                open: !this.state.open\n            });\n        };\n        const handlePriceToggle = () => {\n            this.setState({\n                priceOpen: !this.state.priceOpen\n                // open: false\n            });\n        };\n        return clinicOne === null || clinicTwo === null ? (\n            \"Please select 2 clinics for comparison.\"\n        ) : (\n            <div>\n                <Button\n                    variant=\"contained\"\n                    style={{backgroundColor: \"#ff7c01\"}}\n                    onClick={handleToggle}\n                >\n                    Compare!\n                </Button>\n                <Dialog\n                    style={{fontSize: \"1vw\"}}\n                    open={open}\n                    onClose={handleToggle}\n                    maxWidth=\"lg\"\n                >\n                    <DialogContent>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell> </TableCell>\n                                    <TableCell align=\"left\">{clinicOne.type} </TableCell>\n                                    <TableCell align=\"left\">{clinicTwo.type} </TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {rows.map(row => (\n                                    <TableRow key={row.name} style={{minWidth: 0}}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {row.name === \"Price\" ? (\n                                                <Fragment>\n                                                    Price\n                                                    <MyButton\n                                                        onClick={handlePriceToggle}\n                                                        tip=\"More Details\"\n                                                    >\n                                                        <Typography variant=\"subtitle1\">Expand</Typography>\n                                                        <ExpandMoreIcon/>\n                                                    </MyButton>\n                                                    <Dialog open={priceOpen} onClose={handlePriceToggle}>\n                                                        <DialogContent>\n                                                            <p\n                                                                style={{\n                                                                    fontWeight: \"bold\",\n                                                                    textDecoration: \"underline\"\n                                                                }}\n                                                            >\n                                                                Cost Breakdown based on your Age, Nationality & Eligible\n                                                                Subsidies\n                                                            </p>\n                                                            <Table>\n                                                                <TableHead>\n                                                                    <TableRow>\n                                                                        <TableCell/>\n                                                                        <TableCell\n                                                                            style={{minWidth: 200, maxWidth: 200}}\n                                                                            align=\"right\"\n                                                                        >\n                                                                            {\" \"}\n                                                                            {clinicOne.type}\n                                                                        </TableCell>\n\n                                                                        <TableCell\n                                                                            style={{minWidth: 200, maxWidth: 200}}\n                                                                            align=\"right\"\n                                                                        >\n                                                                            {clinicTwo.type}\n                                                                        </TableCell>\n                                                                    </TableRow>\n                                                                </TableHead>\n                                                                <TableBody>\n                                                                    <TableRow>\n                                                                        <TableCell component=\"th\" scope=\"row\">\n                                                                            <span style={{fontWeight: \"bolder\"}}>\n                                                                                Name\n                                                                            </span>\n                                                                        </TableCell>\n                                                                        <TableCell component=\"th\" scope=\"row\">\n                                                                            <span style={{fontWeight: \"bolder\"}}>\n                                                                            {clinicOne.name}\n                                                                            </span>\n                                                                        </TableCell>\n                                                                        <TableCell component=\"th\" scope=\"row\">\n                                                                            <span style={{fontWeight: \"bolder\"}}>\n                                                                            {\" \"}\n                                                                                {clinicTwo.name}\n                                                                            </span>\n                                                                        </TableCell>\n                                                                    </TableRow>\n                                                                    {consultationPriceRows.map(row => (\n                                                                        <TableRow key={row.name}>\n                                                                            <TableCell component=\"th\"\n                                                                                       scope=\"row\">\n                                                                                {row.name}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicOne.type === \"GP\"\n                                                                                    ? isNaN(row.gp)\n                                                                                        ? row.gp\n                                                                                        : xlsx.SSF.format('$0.00', row.gp)\n                                                                                    : isNaN(row.pc)\n                                                                                        ? row.pc\n                                                                                        : xlsx.SSF.format('$0.00', row.pc)}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicTwo.type === \"GP\"\n                                                                                    ? isNaN(row.gp)\n                                                                                        ? row.gp\n                                                                                        : xlsx.SSF.format('$0.00', row.gp)\n                                                                                    : isNaN(row.pc)\n                                                                                        ? row.pc\n                                                                                        : xlsx.SSF.format('$0.00', row.pc)}\n                                                                            </TableCell>\n                                                                        </TableRow>\n                                                                    ))}\n                                                                    {drugPriceLabel.map(row => (\n                                                                        <TableRow key={row.name}>\n                                                                            <TableCell component=\"th\" scope=\"row\">\n                                                                                {row.name}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicOne.type === \"GP\"\n                                                                                    ? row.gp\n                                                                                    : row.pc}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicTwo.type === \"GP\"\n                                                                                    ? row.gp\n                                                                                    : row.pc}\n                                                                            </TableCell>\n                                                                        </TableRow>\n                                                                    ))}\n                                                                    {drugPriceRows.map(row => (\n                                                                        <TableRow key={row.name}>\n                                                                            <TableCell component=\"th\" scope=\"row\">\n                                                                                {row.name}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicOne.type === \"GP\"\n                                                                                    ? isNaN(row.gp)\n                                                                                        ? row.gp\n                                                                                        : xlsx.SSF.format('$0.00', row.gp * 30)\n                                                                                    : isNaN(row.pc)\n                                                                                        ? row.pc\n                                                                                        : xlsx.SSF.format('$0.00', row.pc * 30)}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicTwo.type === \"GP\"\n                                                                                    ? isNaN(row.gp)\n                                                                                        ? row.gp\n                                                                                        : xlsx.SSF.format('$0.00', row.gp * 30)\n                                                                                    : isNaN(row.pc)\n                                                                                        ? row.pc\n                                                                                        : xlsx.SSF.format('$0.00', row.pc * 30)}\n                                                                            </TableCell>\n                                                                        </TableRow>\n                                                                    ))}\n                                                                    {testPriceLabel.map(row => (\n                                                                        <TableRow key={row.name}>\n                                                                            <TableCell component=\"th\"\n                                                                                       scope=\"row\">\n                                                                                {row.name}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicOne.type === \"GP\"\n                                                                                    ? row.gp\n                                                                                    : row.pc}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicTwo.type === \"GP\"\n                                                                                    ? row.gp\n                                                                                    : row.pc}\n                                                                            </TableCell>\n                                                                        </TableRow>\n                                                                    ))}\n                                                                    {testPriceRows.map(row => (\n                                                                        <TableRow key={row.name}>\n                                                                            <TableCell component=\"th\"\n                                                                                       scope=\"row\">\n                                                                                {row.name}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicOne.type === \"GP\"\n                                                                                    ? isNaN(row.gp)\n                                                                                        ? row.gp\n                                                                                        : xlsx.SSF.format('$0.00', row.gp * 30)\n                                                                                    : isNaN(row.pc)\n                                                                                        ? row.pc\n                                                                                        : xlsx.SSF.format('$0.00', row.pc * 30)}\n                                                                            </TableCell>\n                                                                            <TableCell align=\"right\">\n                                                                                {clinicTwo.type === \"GP\"\n                                                                                    ? isNaN(row.gp)\n                                                                                        ? row.gp\n                                                                                        : xlsx.SSF.format('$0.00', row.gp * 30)\n                                                                                    : isNaN(row.pc)\n                                                                                        ? row.pc\n                                                                                        : xlsx.SSF.format('$0.00', row.pc * 30)}\n                                                                            </TableCell>\n                                                                        </TableRow>\n                                                                    ))}\n                                                                </TableBody>\n                                                            </Table>\n                                                        </DialogContent>\n                                                    </Dialog>\n                                                </Fragment>\n                                            ) : (\n                                                <Fragment>{row.name}</Fragment>\n                                            )}\n                                        </TableCell>\n                                        <TableCell align=\"left\" style={{minWidth: 210}}>{row.gp}</TableCell>\n                                        <TableCell align=\"left\" style={{minWidth: 210}}>{row.pc} </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                            <TableFooter>\n                                <TableCell align=\"right\">\n                                    <Button/>\n                                </TableCell>\n\n\n                                <TableCell align=\"right\">\n                                    <Button\n                                        variant=\"contained\"\n                                        style={{backgroundColor: \"#ff7c01\"}}\n                                    >\n                                        <Link\n                                            to={{\n                                                pathname: \"/ConfirmClinicChoice\",\n                                                state: {\n                                                    choice: clinicOne,\n                                                    formData: this.props.formData\n                                                }\n                                            }}\n                                        >\n                                            <span style={{color: \"white\"}}>Select</span>\n                                        </Link>\n                                    </Button>\n                                </TableCell>\n\n\n                                <TableCell align=\"right\">\n                                    <Button\n                                        // style={{ fontSize: \"1vw\" }}\n                                        variant=\"contained\"\n                                        style={{backgroundColor: \"#ff7c01\"}}\n                                    >\n                                        <Link\n                                            to={{\n                                                pathname: \"/ConfirmClinicChoice\",\n                                                state: {\n                                                    choice: clinicTwo,\n                                                    formData: this.props.formData\n                                                }\n                                            }}\n                                        >\n                                            <span style={{color: \"white\"}}>Select</span>\n                                        </Link>\n                                    </Button>\n                                </TableCell>\n                            </TableFooter>\n                        </Table>\n                    </DialogContent>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default CompareDialog;\n","import React, { useEffect, Fragment } from \"react\";\nimport { makeStyles\n} from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Button from \"@material-ui/core/Button\";\nimport { Link } from \"react-router-dom\";\nimport CompareDialog from \"./CompareDialog\";\n\nimport {\n  DialogContent\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    width: \"100%\"\n  }\n}));\n// Displays the selected clinics tabs for comparison at the top in the FilteredResult page. Used by ResultsTab.\n// Allows for the tabs to be clicked on and display clinic information.\n// FilteredResult --> ResultsTab --> CompareBlock\nconst CompareBlock = props => {\n  const classes = useStyles();\n  const [clinicOne, setClinicOne] = React.useState();\n  const [clinicTwo, setClinicTwo] = React.useState();\n  const [open, setOpen] = React.useState(false);\n  const [openTwo, setOpenTwo] = React.useState(false);\n\n  useEffect(() => {\n    setClinicOne(props.clinicOne);\n    setClinicTwo(props.clinicTwo);\n  },[props.clinicOne, props.clinicTwo]);\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClickOpenTwo() {\n    setOpenTwo(true);\n  }\n\n  function handleClickClose() {\n    setOpen(false);\n  }\n  function handleClickCloseTwo() {\n    setOpenTwo(false);\n  }\n  return (\n    <div className={classes.root}>\n      {clinicOne && clinicOne.type === \"GP\" ? (\n        <Fragment>\n          <Chip\n            label={clinicOne.name}\n            clinic={clinicOne}\n            onClick={handleClickOpen}\n            onDelete={props.callbackDeleteOne}\n            color=\"primary\"\n          />\n          <Dialog open={open} onClose={handleClickClose}>\n            <DialogContent>\n              <img\n                src={\n                  process.env.PUBLIC_URL +\n                  `/ClinicPictures/${clinicOne.properties.FILE_NAME}.png`\n                }\n                alt=\"clinic\"\n                style={{ width: \"100%\" }}\n              />\n              <hr />\n              <span style={{fontWeight:\"bold\"}}>{clinicOne.properties.HCI_NAME} </span> {/*clinicOne Name*/}\n              <br/>\n              {parseFloat(clinicOne.distance).toFixed(2)}km away {/*Distance*/}\n              <hr />\n              <span style={{fontWeight: \"bold\"}}>{clinicOne.properties.DR_NAME} {/*Doctor Name*/} </span>\n              <br/>\n              <br />\n              <span style={{fontWeight: \"bold\"}}>Telephone: </span>\n              <br/>\n              {clinicOne.properties.Tel} <br />\n              <hr />\n              <span style={{fontWeight:\"bold\"}}>Opening Hours:</span>\n              <br/>\n              {clinicOne.properties.ALL_OPENING_HOURS.map(period => (\n                  <p>\n                    {period.day_string}\n                    <br />\n                    {period.opening_hours.join(\", \")}\n                  </p>\n              ))}\n              <hr />\n              <span style={{fontWeight:\"bold\"}}>Address: </span><br/>\n              {clinicOne.properties.BLK_HSE_NO} {clinicOne.properties.STREET_NAME} #\n              {clinicOne.properties.FLOOR_NO}-{clinicOne.properties.UNIT_NO}{\" \"}\n              {clinicOne.properties.BUILDING_NAME} Singapore{\" \"}\n              {clinicOne.properties.PostalCode}\n              <hr/>\n              <p style={{fontWeight: \"bold\"}}>Directions:</p>\n              {clinicOne.properties.ALL_DIRECTIONS.map(path => (\n                  <p>\n                    {path.transport_string}\n                    <br />\n                    {path.directions.join(\", \")}\n                  </p>\n              ))}\n              <hr />\n              <Link\n                to={{\n                  pathname: \"/ConfirmClinicChoice\",\n                  state: {\n                    choice: clinicOne,\n                    formData: props.formData\n                  }\n                }}\n              >\n                <Button size=\"large\" style={{ backgroundColor: \"#ff7c01\" }}>\n                  <span style={{ textDecoration: \"none\", color: \"white\" }}>\n                    Select\n                  </span>\n                </Button>\n              </Link>\n            </DialogContent>\n          </Dialog>\n        </Fragment>\n      ) : clinicOne ? (\n        <Fragment>\n          <Chip\n            label={clinicOne.name}\n            clinic={clinicOne}\n            onClick={handleClickOpen}\n            onDelete={props.callbackDeleteOne}\n            color=\"secondary\"\n          />\n          <Dialog open={open} onClose={handleClickClose}>\n            <DialogContent>\n              <span style={{fontWeight:\"bold\"}}>{clinicOne.Name} <br /> {/*clinicOne Name*/}</span>\n              {parseFloat(clinicOne.distance).toFixed(2)}km away {/*Distance*/}\n              <hr />\n\n              Telephone: {clinicOne.Tel}\n              <hr />\n\n              <span style={{fontWeight:\"bold\"}}>Opening Hours:</span>\n              <br/>\n              {clinicOne.ALL_OPENING_HOURS.map(period => (\n                  <p>\n                    {period.day_string}\n                    <br />\n                    {period.opening_hours.join(\", \")}\n                  </p>\n              ))}\n\n              <hr/>\n              <span style={{fontWeight:\"bold\"}}>Address: </span>\n              <br/>\n              {clinicOne.Address}{\" \"}\n              Singapore {clinicOne.PostalCode}\n              <hr />\n\n              <span style={{fontWeight:\"bold\"}}>Directions:</span>\n              <br/>\n              {clinicOne.ALL_DIRECTIONS.map(path => (\n                  <p>\n                    {path.transport_string}\n                    <br />\n                    {path.directions.join(\", \")}\n                  </p>\n              ))}\n              <hr />\n              <Link\n                to={{\n                  pathname: \"/ConfirmClinicChoice\",\n                  state: {\n                    choice: clinicOne,\n                    formData: props.formData\n                  }\n                }}\n              >\n                <Button size=\"large\" style={{ backgroundColor: \"#ff7c01\" }}>\n                  <span style={{ textDecoration: \"none\", color: \"white\" }}>\n                    Select\n                  </span>\n                </Button>\n              </Link>\n            </DialogContent>\n          </Dialog>\n        </Fragment>\n      ) : (\n        console.log(\"\")\n      )}\n      {clinicTwo && clinicTwo.type === \"Polyclinic\" ? (\n        <Fragment>\n          <Chip\n            label={clinicTwo.name}\n            clinic={clinicTwo}\n            onClick={handleClickOpenTwo}\n            onDelete={props.callbackDeleteTwo}\n            color=\"secondary\"\n          />\n          <br />\n          <br />\n          <Dialog open={openTwo} onClose={handleClickCloseTwo}>\n            <DialogContent>\n              <span style={{fontWeight:\"bold\"}}>{clinicTwo.Name} <br /> {/*Clinic Name*/}</span>\n              {parseFloat(clinicTwo.distance).toFixed(2)}km away {/*Distance*/}\n              <hr />\n\n              Telephone: {clinicTwo.Tel}\n              <hr />\n\n              <span style={{fontWeight:\"bold\"}}>Opening Hours:</span>\n              <br/>\n              {clinicTwo.ALL_OPENING_HOURS.map(period => (\n                  <p>\n                    {period.day_string}\n                    <br />\n                    {period.opening_hours.join(\", \")}\n                  </p>\n              ))}\n\n              <hr/>\n              <span style={{fontWeight:\"bold\"}}>Address: </span>\n              <br/>\n              {clinicTwo.Address}{\" \"}\n              Singapore {clinicTwo.PostalCode}\n              <hr />\n\n              <span style={{fontWeight:\"bold\"}}>Directions:</span>\n              <br/>\n              {clinicTwo.ALL_DIRECTIONS.map(path => (\n                  <p>\n                    {path.transport_string}\n                    <br />\n                    {path.directions.join(\", \")}\n                  </p>\n              ))}\n              <hr />\n\n\n              \n              <Link\n                to={{\n                  pathname: \"/ConfirmClinicChoice\",\n                  state: {\n                    choice: clinicTwo,\n                    formData: props.formData\n                  }\n                }}\n              >\n                <Button size=\"large\" style={{ backgroundColor: \"#ff7c01\" }}>\n                  <span style={{ textDecoration: \"none\", color: \"white\" }}>\n                    Select\n                  </span>\n                </Button>\n              </Link>\n            </DialogContent>\n          </Dialog>\n        </Fragment>\n      ) : clinicTwo ? (\n        <Fragment>\n          <Chip\n            label={clinicTwo.name}\n            clinic={clinicTwo}\n            onClick={handleClickOpenTwo}\n            onDelete={props.callbackDeleteTwo}\n            color=\"primary\"\n          />\n          <Dialog open={openTwo} onClose={handleClickCloseTwo}>\n            <DialogContent>\n              <img\n                src={\n                  process.env.PUBLIC_URL +\n                  `/ClinicPictures/${clinicTwo.properties.FILE_NAME}.png`\n                }\n                alt=\"clinic\"\n                style={{ width: \"100%\" }}\n              />\n              <hr />\n              <span style={{fontWeight:\"bold\"}}>{clinicTwo.properties.HCI_NAME} </span> {/*Clinic Name*/}\n              <br/>\n              {parseFloat(clinicTwo.distance).toFixed(2)}km away {/*Distance*/}\n              <hr />\n              <span style={{fontWeight: \"bold\"}}>{clinicTwo.properties.DR_NAME} {/*Doctor Name*/} </span>\n              <br/>\n              <br />\n              <span style={{fontWeight: \"bold\"}}>Telephone: </span>\n              <br/>\n              {clinicTwo.properties.Tel} <br />\n              <hr />\n              <span style={{fontWeight:\"bold\"}}>Opening Hours:</span>\n              <br/>\n              {clinicTwo.properties.ALL_OPENING_HOURS.map(period => (\n                  <p>\n                    {period.day_string}\n                    <br />\n                    {period.opening_hours.join(\", \")}\n                  </p>\n              ))}\n              <hr />\n              <span style={{fontWeight:\"bold\"}}>Address: </span><br/>\n              {clinicTwo.properties.BLK_HSE_NO} {clinicTwo.properties.STREET_NAME} #\n              {clinicTwo.properties.FLOOR_NO}-{clinicTwo.properties.UNIT_NO}{\" \"}\n              {clinicTwo.properties.BUILDING_NAME} Singapore{\" \"}\n              {clinicTwo.properties.PostalCode}\n              <hr/>\n              <p style={{fontWeight: \"bold\"}}>Directions:</p>\n              {clinicTwo.properties.ALL_DIRECTIONS.map(path => (\n                  <p>\n                    {path.transport_string}\n                    <br />\n                    {path.directions.join(\", \")}\n                  </p>\n              ))}\n              <hr />\n\n\n              <Link\n                to={{\n                  pathname: \"/ConfirmClinicChoice\",\n                  state: {\n                    choice: clinicTwo,\n                    userNationality: props.formData.userNationality,\n                    userSubsidyType: props.formData.userSubsidyType,\n                    userAge: props.formData.userAge\n                  }\n                }}\n              >\n                <Button size=\"large\" style={{ backgroundColor: \"#ff7c01\" }}>\n                  <span style={{ textDecoration: \"none\", color: \"white\" }}>\n                    Select\n                  </span>\n                </Button>\n              </Link>\n            </DialogContent>\n          </Dialog>\n          <br />\n          <br />\n        </Fragment>\n      ) : (\n        console.log(\"\")\n      )}\n\n      {clinicOne && clinicTwo ? (\n        <Fragment>\n          <Grid style={{ flexGrow: 1 }} direction=\"row\">\n            <Grid container justify=\"center\">\n              <CompareDialog\n                clinicOne={clinicOne}\n                clinicTwo={clinicTwo}\n                formData={props.formData}\n              />\n            </Grid>\n          </Grid>\n          <hr />\n        </Fragment>\n      ) : (\n        <div />\n      )}\n    </div>\n  );\n};\nexport default CompareBlock;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ClinicMap from \"./map/ClinicMap\";\nimport PcDialog from \"./PcDialog\";\nimport GpDialog from \"./GpDialog\";\nimport CompareBlock from \"./comparison/CompareBlock\";\nimport Pagination from \"react-js-pagination\";\nfunction TabContainer({ children, dir }) {\n  return (\n    <Typography component=\"div\" dir={dir} style={{ padding: 8 * 3 }}>\n      {children}\n    </Typography>\n  );\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n  dir: PropTypes.string.isRequired\n};\n// Displays the 3 tabs of PC,GP and Map in the results page\n// Also displays the chosen clinics for comparison (DisplayBlock.js)\n\nconst ResultTabs = props => {\n  const theme = useTheme();\n  const [value, setValue] = React.useState(0);\n\n  function handleChange(event, newValue) {\n    setValue(newValue);\n  }\n\n  function handleChangeIndex(index) {\n    setValue(index);\n  }\n  const [open, setOpen] = React.useState(false);\n  const [clinicOne, setClinicOne] = React.useState();\n  const [clinicTwo, setClinicTwo] = React.useState();\n\n  const [activeGPPage, setActiveGPPage] = React.useState(1);\n  const [activePCPage, setActivePCPage] = React.useState(1);\n  const [itemPerPage] = React.useState(10);\n\n  const handleGPClose = (clinic, name) => {\n    setOpen(false);\n    clinic.price = \"$$\";\n    clinic.rating = \"4.3\";\n    clinic.type = \"GP\";\n    clinic.name = name;\n    if (\n      (clinicOne || clinicTwo) &&\n      (clinic === clinicOne || clinic === clinicTwo)\n    ) {\n      alert(\"Cannot compare two same clinics!\");\n    } else if (!clinicOne) {\n      setClinicOne(clinic);\n    } else if (!clinicTwo) {\n      setClinicTwo(clinic);\n    } else {\n      alert(\"Cannot compare more than 2 clinics\");\n    }\n  };\n\n  \n  const handlePCClose = (clinic, name) => {\n    setOpen(false);\n    clinic.price = \"$\";\n    clinic.rating = \"4.0\";\n    clinic.name = name;\n    clinic.type = \"Polyclinic\";\n    if (\n      (clinicOne || clinicTwo) &&\n      (clinic === clinicOne || clinic === clinicTwo)\n    ) {\n      alert(\"Cannot compare two same clinics!\");\n    } else if (!clinicOne) {\n      setClinicOne(clinic);\n    } else if (!clinicTwo) {\n      setClinicTwo(clinic);\n    } else {\n      alert(\"Cannot compare more than 2 clinics\");\n    }\n  };\n  const callbackFunction = clinic => {\n    if (\n      (clinicOne || clinicTwo) &&\n      (clinic === clinicOne || clinic === clinicTwo)\n    ) {\n      alert(\"Cannot compare two same clinics!\");\n    } else if (!clinicOne) {\n      setClinicOne(clinic);\n    } else if (!clinicTwo) {\n      setClinicTwo(clinic);\n    } else {\n      alert(\"Cannot compare more than 2 clinics\");\n    }\n  };\n  const callbackDeleteOne = () => {\n    setClinicOne(null);\n  };\n  const callbackDeleteTwo = () => {\n    setClinicTwo(null);\n  };\n\n  const handleGPPageChange = pageNumber => {\n    setActiveGPPage(pageNumber);\n  };\n  const handlePCPageChange = pageNumber => {\n    setActivePCPage(pageNumber);\n  };\n  var indexOfLastTodoGP = activeGPPage * itemPerPage;\n  var indexOfFirstTodoGP = indexOfLastTodoGP - itemPerPage;\n  var filteredGPTemp = props.GP.slice(indexOfFirstTodoGP, indexOfLastTodoGP);\n\n  const filteredGP = filteredGPTemp.map(clinic => {\n    return (\n      <div key={clinic.properties.id}>\n        <GpDialog\n          clinic={clinic}\n          selectedGP={clinic}\n          open={open}\n          onClose={handleGPClose}\n          formData={props.formData}\n        />\n        <hr />\n      </div>\n    );\n  });\n  var indexOfLastTodoPC = activePCPage * itemPerPage;\n  var indexOfFirstTodoPC = indexOfLastTodoPC - itemPerPage;\n  var filteredPCTemp = props.PC.slice(indexOfFirstTodoPC, indexOfLastTodoPC);\n\n  const filteredPC = filteredPCTemp.map(clinic => {\n    return (\n      <div key={clinic.id}>\n        <PcDialog\n          clinic={clinic}\n          selectedPC={clinic}\n          open={open}\n          onClose={handlePCClose}\n          formData={props.formData}\n        />\n        <hr />\n      </div>\n    );\n  });\n  return (\n    //callback delete methods required because it is the state here in ResultTabs that needs to be changed, as the\n    // clinicOne and clinicTwo state of displayBlock is taken from the state here. If the state here is not changed,\n    // after we delete in DisplayBlock, when it re-renders the displayBlock state will get the old (unchanged) state\n    // from here instead and nothing would have changed (delete fail).\n    <div>\n      <CompareBlock\n        clinicOne={clinicOne}\n        clinicTwo={clinicTwo}\n        formData={props.formData}\n        callbackDeleteOne={callbackDeleteOne}\n        callbackDeleteTwo={callbackDeleteTwo}\n      />\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n        >\n          <Tab label=\"GP\" />\n          <Tab label=\"Polyclinic\" />\n          <Tab label=\"Map View\" />\n        </Tabs>\n      </AppBar>\n      <SwipeableViews\n        axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\n        index={value}\n        onChangeIndex={handleChangeIndex}\n      >\n        <TabContainer dir={theme.direction}>\n          {filteredGP}\n          <Pagination\n            hideDisabled\n            activePage={activeGPPage}\n            itemsCountPerPage={itemPerPage}\n            totalItemsCount={props.GP.length}\n            // pageRangeDisplayed={5}\n            onChange={handleGPPageChange}\n          />\n        </TabContainer>\n        <TabContainer dir={theme.direction}>\n          {filteredPC}\n          <Pagination\n            default\n            activePage={activePCPage}\n            itemsCountPerPage={itemPerPage}\n            totalItemsCount={props.PC.length}\n            pageRangeDisplayed={5}\n            onChange={handlePCPageChange}\n          />\n        </TabContainer>\n        <TabContainer dir={theme.direction}>\n          {props.currentLoc[0] !== 0 && (\n            <ClinicMap\n              coord={props.currentLoc}\n              GP={props.GP}\n              PC={props.PC}\n              callbackFunction={callbackFunction}\n            />\n          )}\n        </TabContainer>\n      </SwipeableViews>\n    </div>\n  );\n};\n\nexport default ResultTabs;\n","import React from \"react\";\nimport GP from \"../data/pcn.json\";\nimport * as turf from \"@turf/turf\";\nimport ResultTabs from \"../components/ResultTabs.js\";\nimport PC from \"../data/newPolyclinics.json\";\nimport Switch from \"@material-ui/core/Switch\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBack from \"@material-ui/icons/ArrowBackIos\";\nimport HelpOutline from \"@material-ui/icons/HelpOutline\";\nimport {Link} from \"react-router-dom\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport {FormLabel} from \"@material-ui/core\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Button from '@material-ui/core/Button';\n\n// this component aims to display the filtered clinic after they fill in the form\n//try not to abuse the API call, im using some kind of free credits from google for this\n//api to be able to consistenly make the api call\n\n//api in use here are: google geocode & turf\n//everything works except for styling, but the content from the json file abit lacking,\n// no opening hrs etc\nclass FilteredResult extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            formData: this.props.location.state, //this gets the info from react router from PatientForm.js\n            userLng: 0,\n            userLat: 0,\n            sortByLoc: false, //3km radius\n            open: false,\n            userNotifDialog: true\n            // searchedClinic: {}\n        };\n        this.goBack = this.goBack.bind(this);\n        this.handleUserNotifToggle = this.handleUserNotifToggle.bind(this);\n        // this.routeChange = this.routeChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch(`http://156.67.217.219:5000/googleMap/getGeoLoc`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                postalCode: this.state.formData.postalCode,\n            })\n        })\n            .then(res => res.json())\n            .then(json => {\n                this.setState({\n                    userLng: json.results[0].geometry.location.lng,\n                    userLat: json.results[0].geometry.location.lat\n                });\n            });\n    }\n\n    handleUserNotifToggle() {\n        this.setState({userNotifDialog: !this.state.userNotifDialog});\n    }\n\n    goBack() {\n        this.props.history.goBack();\n    }\n\n    // routeChange = () => {\n    //   let path = `/FilteredResult/Search`;\n    //   this.props.history.push(path);\n    // };\n\n    render(props) {\n        const {userLat, userLng, formData, sortByLoc} = this.state;\n        const userNotification = (\n                <Dialog open={this.state.userNotifDialog} onClose={this.handleUserNotifToggle}>\n                    <DialogContent style={{font: \"\"}}>\n                        Hello! This app is still in its <span style={{fontWeight:\"bold\"}}> BETA </span> phase and the prices available for comparison are limited\n                        to\n                        some of the more common drugs for diabetic patients.\n                        <br/><br/>\n                        Do checkout our different features: <br/>\n                        - <span style={{fontWeight:\"bold\"}}>Map View Feature</span> : press 'MAP VIEW' <br/>\n                        - <span style={{fontWeight:\"bold\"}}>Compare Between Clinics</span>: select 2 clinics from the list of clinics/from MapView\n                        & press 'add to comparison'\n                        <br/>\n                        <hr/>\n                        <span style={{fontStyle:\"italic\",fontSize:\"small\"}}>Please help us out by submitting any feedback you have at the end of the app. Thank you for your\n                            support! </span>\n                    </DialogContent>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.handleUserNotifToggle} size=\"large\">\n                        Continue\n                    </Button>\n                </Dialog>\n        );\n        const filteredGP = GP.features.filter(clinic => {\n            clinic.name = clinic.properties.HCI_NAME;\n            const from = turf.point([userLng, userLat]);\n            const to = turf.point([\n                clinic.geometry.coordinates[0],\n                clinic.geometry.coordinates[1]\n            ]);\n            const options = {units: \"kilometers\"};\n            const dist = turf.distance(from, to, options);\n            clinic.distance = dist;\n            if (sortByLoc) {\n                return dist <= 3;\n            } else {\n                return true;\n            }\n        });\n\n        const filteredPC = PC.clinics.filter(clinic => {\n            clinic.name = clinic.Name;\n            const from = turf.point([userLng, userLat]);\n            const to = turf.point([clinic.coord[0], clinic.coord[1]]);\n            const options = {units: \"kilometers\"};\n            const dist = turf.distance(from, to, options);\n            clinic.distance = dist;\n            return dist <= 100;\n        });\n\n        function sortDist(a, b) {\n            if (a.distance < b.distance) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n\n        const toggleDistSort = () => {\n            this.setState({sortByLoc: !sortByLoc});\n        };\n        const sortedGP = filteredGP.sort(sortDist);\n        const sortedPC = filteredPC.sort(sortDist);\n        const help = () => {\n            alert(\n                \"Clinics are sorted by distance; nearest at the top.\" +\n                \"\\n\\n\" +\n                \"Map view is available at the rightmost tab.\" +\n                \"\\n\\n\" +\n                \"Toggle the 'Filter by 3km radius' switch to choose between displaying all clinics or just clinics within your 3km radius.\" +\n                \"\\n\\n\" +\n                \"Add two clinics to comparison to activate the compare feature!\" +\n                \"\\n\\n\" +\n                \"Select a clinic to move on!\" +\n                \"\\n\\n\\n\\n\\n\" +\n                \"For any further enquiries please contact pathway@u.nus.edu\"\n            );\n        };\n        return (\n            <div>\n                <AppBar position=\"static\" style={{backgroundColor: \"#ff7c01\"}}>\n                    <Toolbar>\n                        <Link to=\"/Form\" style={{textDecoration: \"none\", color: \"white\"}}>\n                            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                                <ArrowBack/>\n                                <Typography variant=\"subtitle1\">Back</Typography>\n                            </IconButton>{\" \"}\n                        </Link>\n                        <Typography variant=\"h6\" align=\"center\" style={{flexGrow: 1}}>\n                            Filtered clinics for{\" \"}\n                            <span style={{textDecoration: \"underline\", fontWeight: \"bold\"}}>\n                S{formData.postalCode}\n              </span>{\" \"}\n                            {formData.subsidyType === \"\"\n                                ? \"\"\n                                : `with ${formData.subsidyType} subsidy`}\n                            <br/>\n                            <FormLabel style={{color: \"white\"}}>\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={this.state.sortByLoc}\n                                            value={this.state.sort}\n                                            onChange={toggleDistSort}\n                                            inputProps={{\"aria-label\": \"primary checkbox\"}}\n                                            color=\"primary\"\n                                        />\n                                    }\n                                    label=\"Filter by 3km radius\"\n                                    labelPlacement=\"start\"\n                                />\n                            </FormLabel>\n                        </Typography>\n                        {/* <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"menu\"\n              onClick={this.routeChange}\n            >\n              <SearchIcon callbackFunc={callbackFunc} />\n              {console.log(GP)}\n            </IconButton>{\" \"} */}\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            onClick={help}\n                        >\n                            <Typography variant=\"subtitle1\">Help </Typography> <HelpOutline/>\n                        </IconButton>{\" \"}\n                    </Toolbar>\n                </AppBar>\n                {userNotification}\n                <div>\n                    <hr/>\n                    <ResultTabs\n                        GP={sortedGP}\n                        PC={sortedPC}\n                        formData={formData}\n                        // searchedClinic={this.searchedClinic}\n                        currentLoc={[this.state.userLng, this.state.userLat]}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FilteredResult;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Typography, Button} from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBack from \"@material-ui/icons/ArrowBackIos\";\nimport ArrowNext from \"@material-ui/icons/NavigateNext\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport consultationPrices from \"../data/consultationPrices\";\nimport drugPrices from \"../data/drugPrices\";\nimport testPrices from \"../data/testPrices\";\n\nvar xlsx = require(\"xlsx\");\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(3, 3)\n  }\n}));\n\nconst ConfirmClinicChoice = props => {\n  const classes = useStyles();\n  function goBack() {\n    props.history.goBack();\n  }\n  const [choice] = React.useState(props.location.state.choice);\n  const [userNationality] = React.useState(props.location.state.formData.nationality)\n  const [userSubsidyType] = React.useState(props.location.state.formData.subsidyType)\n  const [userAge] = React.useState(props.location.state.formData.age)\n\n  function createData(name, gp, pc) {\n    return { name, gp, pc };\n  }\n  const consultationPriceRows = consultationPrices.consultation.map(function (data) {\n    return createData(\n        data.Description,\n        userNationality === \"SG\"\n            ? userSubsidyType === \"PG\"\n            ? data.PCN_Price.PG\n            : userSubsidyType === \"MG\"\n                ? data.PCN_Price.MG\n                : userSubsidyType === \"CHAS Blue\" || userSubsidyType === \"CHAS Orange\"\n                    ? data.PCN_Price.BLUE_CHAS\n                    : data.PCN_Price.NON_CHAS\n            : data.PCN_Price.NON_RESIDENT,\n        userNationality === \"Singaporean\"\n            ? userSubsidyType === \"PG\"\n            ? data.Polyclinic_Price.PG\n            : userSubsidyType === \"MG\"\n                ? data.Polyclinic_Price.MG\n                : userAge < 18 || userAge >= 65\n                    ? data.Polyclinic_Price.SG_CHILD_ELDERLY\n                    : data.Polyclinic_Price.SG_ADULT\n            : userNationality === \"Permanent Resident\"\n            ? data.Polyclinic_Price.PR\n            : data.Polyclinic_Price.NON_RESIDENT\n    )\n  })\n  const drugPriceRows = drugPrices.drugs.map(function (data) {\n    return createData(\n        data.Name + \": \" + data.Description,\n        userNationality === \"Singaporean\"\n            ? userSubsidyType === \"CHAS Orange\" || userSubsidyType === \"CHAS Blue\"\n            ? data.PCN_Price.ORANGE_CHAS\n            : userSubsidyType === \"PG\"\n                ? data.PCN_Price.PG_CHAS\n                : data.PCN_Price.NON_CHAS\n            : data.PCN_Price.NON_SG,\n        userNationality === \"Singaporean\"\n            ? userAge >= 65\n            ? userSubsidyType === \"PG\"\n                ? data.Polyclinic_Price.PG\n                : userSubsidyType === \"MG\"\n                    ? data.Polyclinic_Price.MG_above65\n                    : data.Polyclinic_Price.noPG_above65\n            : userSubsidyType === \"MG\"\n                ? data.Polyclinic_Price.MG_below65\n                : data.Polyclinic_Price.below65\n            : data.Polyclinic_Price.nonSG\n    )\n  });\n  const testPriceRows = testPrices.tests.map(function (data) {\n        return createData(\n            data.Name + \": \" + data.Description,\n            userNationality === \"Singaporean\"\n                ? userSubsidyType === \"PG\"\n                ? data.PCN_Price.PG\n                : userSubsidyType === \"MG\"\n                    ? data.PCN_Price.MG\n                    : userSubsidyType === \"CHAS Orange\" || userSubsidyType === \"CHAS Blue\"\n                        ? data.PCN_Price.ORANGE_CHAS\n                        : data.PCN_Price.Non_CHAS\n                : userNationality === \"Permanent Resident\"\n                ? data.PCN_Price.PR\n                : data.PCN_Price.NON_RESIDENT,\n            userNationality === \"Singaporean\"\n                ? userAge < 18 || userAge >= 65\n                ? data.Polyclinic_Price.SG_CHILD_ELDERLY\n                : data.Polyclinic_Price.SG\n                : userNationality === \"Permanent Resident\"\n                ? data.Polyclinic_Price.PR\n                : data.Polyclinic_Price.NON_RESIDENT\n        )\n      }\n  )\n  const drugPriceLabel = [\n    createData(\n        <span style={{fontWeight: \"bold\"}}>Drug prices/month</span>,\n        <span style={{fontWeight: \"bold\"}}>Estimated drug prices per month, ie 30 x tablet</span>,\n        <span style={{fontWeight: \"bold\"}}>Estimated drug prices per month, ie 30 x tablet</span>\n    )];\n\n  const testPriceLabel = [\n    createData(\n        <span style={{fontWeight: \"bold\"}}>Prices for Tests & Screenings</span>,\n        <span style={{fontWeight: \"bold\"}}>Prices for Tests & Screenings</span>,\n        <span style={{fontWeight: \"bold\"}}>Prices for Tests & Screenings</span>\n    )];\n\n  // const priceRows = consultationPriceRows.concat(drugPriceRows.concat(testPriceRows)).flatMap(function (data) {\n  //   return data;\n  // });\n  const result = (\n    <Paper sqaure=\"false\" className={classes.root}>\n      {choice.type === \"GP\" ? (\n        <Typography variant=\"body2\" align=\"center\" style={{ flexGrow: 1 }}>\n          <Typography variant=\"h5\" style={{ fontWeight: \"bold\" }}>\n            {choice.properties.HCI_NAME}\n          </Typography>{\" \"}\n          <br /> {choice.properties.BLK_HSE_NO}{\" \"}\n          {choice.properties.STREET_NAME} #{choice.properties.FLOOR_NO}-\n          {choice.properties.UNIT_NO} {choice.properties.BUILDING_NAME}{\" \"}\n          Singapore {choice.properties.PostalCode}\n          <br /> Telephone: {choice.properties.Tel} <br />\n          <hr />\n          <Typography variant=\"h6\" style={{ fontWeight: \"bolder\" }}>\n            Price breakdown:\n          </Typography>\n          <TableBody>\n            <TableRow>\n              <TableCell component=\"th\" scope=\"row\">\n                <span style={{ fontWeight: \"bolder\" }}>Description</span>\n              </TableCell>\n            </TableRow>\n            {consultationPriceRows.map(row=>(\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\"\n                             scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? isNaN(row.gp)\n                            ? row.gp\n                            : xlsx.SSF.format('$0.00', row.gp)\n                        : isNaN(row.pc)\n                            ? row.pc\n                            : xlsx.SSF.format('$0.00', row.pc)}\n                  </TableCell>\n                </TableRow>\n            ))}\n            {drugPriceLabel.map(row => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? row.gp\n                        : row.pc}\n                  </TableCell>\n                </TableRow>\n            ))}\n            {drugPriceRows.map(row => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? isNaN(row.gp)\n                            ? row.gp\n                            : xlsx.SSF.format('$0.00', row.gp * 30)\n                        : isNaN(row.pc)\n                            ? row.pc\n                            : xlsx.SSF.format('$0.00', row.pc * 30)}\n                  </TableCell>\n                </TableRow>\n            ))}\n            {testPriceLabel.map(row => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\"\n                             scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? row.gp\n                        : row.pc}\n                  </TableCell>\n                </TableRow>\n            ))}\n            {testPriceRows.map(row => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\"\n                             scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? isNaN(row.gp)\n                            ? row.gp\n                            : xlsx.SSF.format('$0.00', row.gp * 30)\n                        : isNaN(row.pc)\n                            ? row.pc\n                            : xlsx.SSF.format('$0.00', row.pc * 30)}\n                  </TableCell>\n                </TableRow>\n            ))}\n          </TableBody>\n        </Typography>\n      ) : (\n        <Typography variant=\"body1\" align=\"center\" style={{ flexGrow: 1 }}>\n          {\" \"}\n          Clinic Name: {choice.Name} <br /> Address: {choice.Address} Singapore{\" \"}\n          {choice.PostalCode}\n          <br /> Telephone: {choice.Tel} <br /> Distance:{\" \"}\n          {parseFloat(choice.distance).toFixed(2)}km away\n          <hr />\n          <Typography variant=\"h6\" style={{ fontWeight: \"bolder\" }}>\n            Price breakdown:\n          </Typography>\n          <TableBody>\n            <TableRow>\n              <TableCell component=\"th\" scope=\"row\">\n                <span style={{ fontWeight: \"bolder\" }}>Description</span>\n              </TableCell>\n            </TableRow>\n            {consultationPriceRows.map(row=>(\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\"\n                             scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? isNaN(row.gp)\n                            ? row.gp\n                            : xlsx.SSF.format('$0.00', row.gp)\n                        : isNaN(row.pc)\n                            ? row.pc\n                            : xlsx.SSF.format('$0.00', row.pc)}\n                  </TableCell>\n                </TableRow>\n            ))}\n            {drugPriceLabel.map(row => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? row.gp\n                        : row.pc}\n                  </TableCell>\n                </TableRow>\n            ))}\n            {drugPriceRows.map(row => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? isNaN(row.gp)\n                            ? row.gp\n                            : xlsx.SSF.format('$0.00', row.gp * 30)\n                        : isNaN(row.pc)\n                            ? row.pc\n                            : xlsx.SSF.format('$0.00', row.pc * 30)}\n                  </TableCell>\n                </TableRow>\n            ))}\n            {testPriceLabel.map(row => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\"\n                             scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? row.gp\n                        : row.pc}\n                  </TableCell>\n                </TableRow>\n            ))}\n            {testPriceRows.map(row => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\"\n                             scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {choice.type === \"GP\"\n                        ? isNaN(row.gp)\n                            ? row.gp\n                            : xlsx.SSF.format('$0.00', row.gp * 30)\n                        : isNaN(row.pc)\n                            ? row.pc\n                            : xlsx.SSF.format('$0.00', row.pc * 30)}\n                  </TableCell>\n                </TableRow>\n            ))}\n          </TableBody>\n        </Typography>\n      )}\n    </Paper>\n  );\n  return (\n    <div>\n      <AppBar position=\"static\" style={{ backgroundColor: \"#ff7c01\" }}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={goBack}\n          >\n            <ArrowBack />\n            <Typography variant=\"subtitle1\">Back</Typography>\n          </IconButton>{\" \"}\n          <Typography variant=\"h5\" align=\"center\" style={{ flexGrow: 1 }}>\n            CONFIRM YOUR CHOICE\n          </Typography>\n          <Link\n            to={{ pathname: \"/ConfirmedChoice\", state: { choice: choice } }}\n            style={{ textDecoration: \"none\", color: \"white\" }}\n          >\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n              <Typography variant=\"subtitle1\">Confirm</Typography> <ArrowNext />\n            </IconButton>{\" \"}\n          </Link>\n        </Toolbar>\n      </AppBar>\n      {result}\n      <br />\n      <br />\n      <div style={{ textAlign: \"center\" }}>\n\n        \n        <Link to={{ pathname: \"/ConfirmedChoice\", state: { choice: choice } }}>\n          <Button\n            variant=\"contained\"\n            size=\"large\"\n            style={{ backgroundColor: \"#ff7c01\" }}\n          >\n            <span style={{ textDecoration: \"none\", color: \"white\" }}>\n              Confirm\n            </span>\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default ConfirmClinicChoice;\n","import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBack from \"@material-ui/icons/ArrowBackIos\";\nimport {Typography, Button} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\nimport Rating from '@material-ui/lab/Rating';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport Box from '@material-ui/core/Box';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(3, 3)\n    }\n}));\nconst experienceLabels = {\n    1: 'Very Unsatisfactory',\n    2: 'Unsatisfactory',\n    3: 'Neutral',\n    4: 'Satisfactory',\n    5: 'Very Satisfactory',\n};\nconst usefulnessLabels = {\n    1: 'Very Unhelpful',\n    2: 'Unhelpful',\n    3: 'Neutral',\n    4: 'Helpful',\n    5: 'Very Helpful',\n}\n\nexport const SummaryPage = props => {\n    const classes = useStyles();\n    const [userExperience, setUserExperience] = React.useState(3);\n    const [experienceHover, setExperienceHover] = React.useState(3);\n    const [usefulness, setUsefulness] = React.useState(3);\n    const [usefulnessHover, setUsefulnessHover] = React.useState(3);\n    const [feedback, setFeedback] = React.useState(\"\");\n    const [dialog, setDialog] = React.useState(true);\n\n    function goBack() {\n        props.history.goBack();\n    }\n\n    const alertClick = () => {\n        alert(\"This service will be available soon!\")\n    }\n    const handleUserExperience = (event) => {\n        const {value} = event.target;\n        setUserExperience(parseInt(value));\n    }\n    const handleUsefulness = (event) => {\n        const {value} = event.target;\n        setUsefulness(parseInt(value));\n    }\n    const handleFeedback = (event) => {\n        const {value} = event.target;\n        setFeedback(value);\n    }\n    const handleToggle = () => {\n        setDialog(!dialog);\n    }\n    const submitFeedback = () => {\n        fetch('http://156.67.217.219:5000/dbStorage/submitUserFeedback', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                userExperience: userExperience,\n                usefulness: usefulness,\n                feedback: feedback\n            })\n        })\n            .then(res => {\n                res.json();\n                handleToggle();\n            })\n            .catch(err => console.error(err));\n    }\n    const feedbackForm = (\n        <Dialog open={dialog} onClose={handleToggle}>\n            <DialogContent>\n                <span>\n                    On a scale of 1 to 5:\n                    <hr/>\n                </span>\n                <span>\n                How would you rate\n                <br/>\n                your user experience?\n                </span>\n                <br/>\n                <Rating\n                    name=\"userExperience\"\n                    value={userExperience}\n                    precision={1}\n                    emptyIcon={<StarBorderIcon fontSize=\"inherit\"/>}\n                    onChange={handleUserExperience}\n                    onChangeActive={(event,newExperienceHover) => {\n                        setExperienceHover(newExperienceHover);\n                    }}\n                />\n                <span style={{fontSize:\"small\"}}>\n                {userExperience !== null && <Box ml={2}>{experienceLabels[experienceHover !== -1 ? experienceHover : userExperience]}</Box>}\n                </span>\n                <br/>\n                <span>\n                How helpful was this\n                <br/>\n                app in finding your\n                <br/>\n                healthcare provider?\n                </span>\n                <br/>\n                <Rating\n                    name=\"usefulness\"\n                    value={usefulness}\n                    precision={1}\n                    emptyIcon={<StarBorderIcon fontSize=\"inherit\"/>}\n                    onChange={handleUsefulness}\n                    onChangeActive={(event,newUsefulnessHover) => {\n                        setUsefulnessHover(newUsefulnessHover);\n                    }}\n                />\n                <span style={{fontSize:\"small\"}}>\n                {usefulness !== null && <Box ml={2}>{usefulnessLabels[usefulnessHover !== -1 ? usefulnessHover : usefulness]}</Box>}\n                </span>\n                <hr/>\n                <FormControl variant=\"outlined\">\n                    <TextareaAutosize\n\n                        rowsMin={5}\n                        name=\"feedback\"\n                        label=\"Submit a feedback\"\n                        placeholder=\"How was your experience with the app? (Optional) \"\n                        variant=\"outlined\"\n                        value={feedback}\n                        onChange={handleFeedback}\n                    />\n                </FormControl>\n            </DialogContent>\n            <Button variant=\"contained\" color=\"primary\" onClick={submitFeedback} size=\"large\">\n                Submit\n            </Button>\n        </Dialog>\n    )\n    const {choice} = props.location.state;\n    const result = (\n        <Paper\n            sqaure=\"false\"\n            className={classes.root}\n            style={{fontWeight: \"bold\"}}\n        >\n            {choice.type === \"GP\" ? (\n                <Paper sqaure=\"false\" className={classes.root}>\n                    <img src={process.env.PUBLIC_URL + `/ClinicPictures/${choice.properties.FILE_NAME}.png`}\n                         alt=\"pcn\" style={{width: \"100%\"}}/>\n                    <br/>\n                    <br/>\n                    {choice.properties.HCI_NAME} <br/>\n                    {choice.properties.DR_NAME} <br/>\n                    {choice.properties.BLK_HSE_NO}{\" \"}\n                    {choice.properties.STREET_NAME} #{choice.properties.FLOOR_NO}-\n                    {choice.properties.UNIT_NO} {choice.properties.BUILDING_NAME}{\" \"}\n                    S{choice.properties.PostalCode}\n                    <br/> Telephone: {choice.properties.Tel} <br/>\n\n                    <hr/>\n\n                    <p>Opening Hours:</p>\n\n                    {choice.properties.ALL_OPENING_HOURS.map(period => (\n                        <p>\n                            {period.day_string}\n                            <br/>\n                            {period.opening_hours.join(\", \")}\n                        </p>\n                    ))}\n                    <hr/>\n\n                    <p>Directions:</p>\n                    {choice.properties.ALL_DIRECTIONS.map(path => (\n                        <p>\n                            {path.transport_string}\n                            <br/>\n                            {path.directions.join(\", \")}\n                        </p>\n                    ))}\n                    <hr/>\n\n\n                    {/* Opening hours:\n            {choice.properties.ALL_OPENING_HOURS.map(period => (\n              period.day_string + \":\\n\" + period.opening_hours.join(\",\\n\")\n            ))\n            .join(\", \\n\")} <br />\n          \n          Directions: { \n            choice.properties.ALL_DIRECTIONS.map(path => (\n              path.transport_string + \"\\n\" + path.directions.join(\",\\n\")\n            ))\n            .join(\", \\n\")} <br /> */}\n\n                    <hr/>\n\n                    {/*<span> Referral flowchart of your healthcare journey so far:</span>*/}\n                    {/*<img src={GpRoute} alt=\"gp route\" style={{ width: \"100%\" }} />*/}\n                </Paper>\n            ) : (\n                <div>\n                    {choice.Name}: <br/>\n                    Address: {choice.Address} S{choice.PostalCode}\n                    <br/> Telephone: {choice.Tel} <br/> Distance:{\" \"}\n                    {parseFloat(choice.distance).toFixed(2)}km away\n                    <hr/>\n\n                    <p>Opening Hours:</p>\n                    <hr/>\n                    {choice.ALL_OPENING_HOURS.map(period => (\n                        <p>\n                            {period.day_string}\n                            <br/>\n                            {period.opening_hours.join(\", \")}\n                        </p>\n                    ))}\n                    <hr/>\n                    <p>Directions:</p>\n                    {choice.ALL_DIRECTIONS.map(path => (\n                        <p>\n                            {path.transport_string}\n                            <br/>\n                            {path.directions.join(\", \")}\n                        </p>\n                    ))}\n                    <hr/>\n\n                    {/*<span>Referral flowchart of your healthcare journey so far:</span>*/}\n                    {/*<img src={PCRoute} alt=\"pc route\" style={{ width: \"100%\" }} />*/}\n                </div>\n            )}\n        </Paper>\n    );\n\n    return (\n        <body>\n        <AppBar position=\"static\" style={{backgroundColor: \"#ff7c01\"}}>\n            <Toolbar>\n                <IconButton\n                    edge=\"start\"\n                    color=\"inherit\"\n                    aria-label=\"menu\"\n                    onClick={goBack}\n                >\n                    <ArrowBack/>\n                    <Typography variant=\"subtitle1\">Back</Typography>\n                </IconButton>{\" \"}\n                <Typography variant=\"h5\" align=\"center\" style={{flexGrow: 1}}>\n                    Summary\n                </Typography>\n                <Typography variant=\"subtitle1\"><span\n                    style={{color: \"#ff7c01\"}}>----------------</span></Typography>\n            </Toolbar>\n        </AppBar>\n        <br/>\n        <br/>\n        <box width={1}> {feedbackForm} </box>\n        <Typography variant=\"button\" align=\"center\">\n            Thank you, the details of your selected clinic for your follow-up\n            treatment are as follows:\n            <br/>\n            {result}\n            <br/>\n        </Typography>\n\n        <div style={{textAlign: \"center\"}}>\n            <Button\n                variant=\"contained\"\n                size=\"large\"\n                style={{backgroundColor: \"#ff7c01\"}}\n                onClick={alertClick}\n            >\n                {\" \"}\n                <span style={{textDecoration: \"none\", color: \"white\"}}>\n            Send to my email{\" \"}\n          </span>\n            </Button>\n        </div>\n        <br/>\n        <br/>\n        <br/>\n        <hr/>\n        <Typography variant=\"caption\" align=\"center\">\n            {\" \"}\n            All information quoted above belongs to MOHT (MOH), NUHS Primary Care\n            Department, the Primary Care Network, Data.gov.sg and the Pathway team. Please direct\n            any queries to pathway@u.nus.edu.\n        </Typography>\n        </body>\n    );\n};\n\nexport default SummaryPage;\n","// utils/GoogleAnalytics.js\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactGA from 'react-ga';\nimport { Route } from 'react-router-dom';\n\nclass GoogleAnalytics extends Component {\n    componentDidMount () {\n        this.logPageChange(\n            this.props.location.pathname,\n            this.props.location.search\n        );\n    }\n\n    componentDidUpdate ({ location: prevLocation }) {\n        const { location: { pathname, search } } = this.props;\n        const isDifferentPathname = pathname !== prevLocation.pathname;\n        const isDifferentSearch = search !== prevLocation.search;\n\n        if (isDifferentPathname || isDifferentSearch) {\n            this.logPageChange(pathname, search);\n        }\n    }\n\n    logPageChange (pathname, search = '') {\n        const page = pathname + search;\n        const { location } = window;\n        ReactGA.set({\n            page,\n            location: `${location.origin}${page}`,\n            ...this.props.options\n        });\n        ReactGA.pageview(page);\n    }\n\n    render () {\n        return null;\n    }\n}\n\nGoogleAnalytics.propTypes = {\n    location: PropTypes.shape({\n        pathname: PropTypes.string,\n        search: PropTypes.string\n    }).isRequired,\n    options: PropTypes.object\n};\n\nconst RouteTracker = () => <Route component={GoogleAnalytics} />;\n\nconst init = (options = {}) => {\n    const isGAEnabled = process.env.NODE_ENV === 'production';\n    console.log(\"Google analytics\", isGAEnabled);\n    if (isGAEnabled) {\n        ReactGA.initialize(\"UA-155752920-1\");\n        ReactGA.pageview('/');\n    }\n\n    return isGAEnabled;\n};\n\nexport default {\n    GoogleAnalytics,\n    RouteTracker,\n    init\n};","import React from \"react\";\nimport Login from \"./pages/Welcome\";\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport Language from \"./pages/Language\";\nimport GeneralInfo from \"./pages/GeneralInfo\";\nimport Form from \"./pages/PatientForm\";\nimport FilteredResult from \"./pages/FilteredResult\";\nimport ConfirmClinicChoicePage from \"./pages/ConfirmClinicChoice\";\nimport confirmedChoicePage from \"./pages/SummaryPage\";\nimport GA from './util/GoogleAnalytics'\n\n\n//here is where i put all the routes tgt. can include the help button here which will\n//then be present in all the subsequent pages\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Router>\n                {GA.init() && <GA.RouteTracker/>}\n                <div>\n                    <Switch>\n                        <Route path=\"/\" exact component={Login}/>\n                        <Route path=\"/Language\" exact component={Language}/>\n                        <Route path=\"/GeneralInfo\" exact component={GeneralInfo}/>\n                        <Route path=\"/Form\" exact component={Form}/>\n                        <Route path=\"/FilteredResult\" exact component={FilteredResult}/>\n                        <Route path=\"/ConfirmClinicChoice\" exact component={ConfirmClinicChoicePage}/>\n                        <Route path=\"/confirmedChoice\" exact component={confirmedChoicePage}/>\n                    </Switch>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}